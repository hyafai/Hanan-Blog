{
  "hash": "bceec194a5db15a20f0416b077e0fae1",
  "result": {
    "markdown": "---\ntitle: \"Final_Project_qmd\"\nauthor: \"Hanan Yafai\"\ndate: \"2023-05-15\"\ncategories: [notes]\nimage: \"logo.png\"\ntheme: \"pulse\"\nhtml_document:\n toc: TRUE\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#Load packages\n\n\noptions(repos = list(CRAN=\"http://cran.rstudio.com/\"))\ninstall.packages(\"remotes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nThe downloaded binary packages are in\n\t/var/folders/6h/2tbp9dk55q18rrn01jdymmxr0000gn/T//Rtmp7bDDcV/downloaded_packages\n```\n:::\n\n```{.r .cell-code}\nremotes::install_github(\"siggitrausti/siggitRausti\")\n\nlibrary(tidyverse) \nlibrary(misty)\nlibrary(openssl)\n\n# Import raw data.\n\ndat_raw <- \n  read_csv2('Data/Study1_data_raw.csv')\n\n# Check for zero variance in responses\n\n## We preregistered that we would exclude participants with zero variance in their responses, indicating that they clicked through the questionnaire. We checked the variance in participants' responses across all dependent measures, using the  `row_sds` function from the `siggitRausti` package.\n```\n:::\n\n\n\n There were no cases with zero variance in responses, so we did not exclude any participants.\n\n# Variable computations\n\n## Dependent measures\n\n The main dependent variable was the strength of participants' perceived relationship between health and taste, which we assessed in two ways. \n\nParticipants estimated the probability of getting a tasty food, given that they order a healthy and an unhealthy food, both on a scale from 0% to 100%, separately for each delivery app (Conditional probability estimate).\n\n# Also, participants indicated, within as well as across contexts, which foods they thought to taste better on a scale from 1 = *the unhealthy foods* to 100 = *the healthy foods* (Relative contingency belief). \n\n## First, we re-coded all measures so that they ranged from - 0.5 to 0.5.\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <-\n  dat_raw %>% \n  mutate(healthy_tasty_c1_R = (healthy_tasty_c1 - 50) / 100,\n         unhealthy_tasty_c1_R = (unhealthy_tasty_c1 - 50) / 100,\n         belief_ht_c1_R = (belief_ht_c1 - 50) / 100, \n         healthy_tasty_c2_R = (healthy_tasty_c2 - 50) / 100,\n         unhealthy_tasty_c2_R = (unhealthy_tasty_c2 - 50) / 100,\n         belief_ht_c2_R = (belief_ht_c2 - 50) / 100, \n         belief_ht_overall_R = (belief_ht_overall - 50) / 100)\n```\n:::\n\n\n\nFor the conditional probability estimates, we calculated for each app the difference between the estimated probability of getting a tasty food between the healthy and unhealthy food. A positive value indicates a stronger healthy-tasty belief, a negative value indicates an unhealthy-tasty belief.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <-\n  dat %>% \n  mutate(condi_est_c1 = healthy_tasty_c1_R - unhealthy_tasty_c1_R,\n         condi_est_c2 = healthy_tasty_c2_R - unhealthy_tasty_c2_R)\n```\n:::\n\n\n\n# Next, we checked, whether this difference score correlated with the relative contingency belief.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  select(condi_est_c1, belief_ht_c1_R) %>% \n  item.alpha()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Unstandardized Coefficient Alpha with 95% Confidence Interval\n\n    n Items Alpha  Low  Upp\n  150     2  0.77 0.68 0.83\n```\n:::\n\n```{.r .cell-code}\ndat %>% \n  select(condi_est_c2, belief_ht_c2_R) %>% \n  item.alpha()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Unstandardized Coefficient Alpha with 95% Confidence Interval\n\n    n Items Alpha  Low  Upp\n  150     2  0.53 0.34 0.66\n```\n:::\n:::\n\n\nReliability between the conditional probability estimate and the relative contingency belief was acceptable in the first context (Cronbach's alpha .77), but low in the second context (Cronbach's alpha .53), so we analysed the two dependent variables separately.\n\n## Additional measures\n\n### Protestant ethic scale (PES)\n\n We assessed participants' protestant ethic with 11 items by Katz & Hass (1988).\nParticipants indicated their agreement with 11 items on a scale from 0 = *strongly disagree* to 5 = *strongly agree*.</br>  E.g., “I feel uneasy when there is little work for me to do.”\n\n#### Scale reliability\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  select(starts_with('PES_')) %>% \n  item.alpha()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Unstandardized Coefficient Alpha with 95% Confidence Interval\n\n    n Items Alpha  Low  Upp\n  150    11  0.84 0.81 0.88\n\n Item-Total Correlation and Coefficient Alpha if Item Deleted\n\n  Variable   n nNA   pNA    M   SD  Min  Max It.Cor Alpha\n  PES_1    150   0 0.00% 3.01 1.40 1.00 6.00   0.61  0.78\n  PES_2    150   0 0.00% 1.99 1.10 1.00 6.00   0.57  0.83\n  PES_3    150   0 0.00% 3.37 1.40 1.00 6.00   0.49  0.84\n  PES_4    150   0 0.00% 2.43 1.24 1.00 6.00   0.62  0.82\n  PES_5    150   0 0.00% 4.30 1.24 1.00 6.00   0.59  0.83\n  PES_6    150   0 0.00% 2.82 1.23 1.00 6.00   0.60  0.83\n  PES_7    150   0 0.00% 2.95 1.35 1.00 6.00   0.23  0.86\n  PES_8    150   0 0.00% 4.16 1.14 1.00 6.00   0.54  0.83\n  PES_9    150   0 0.00% 4.01 1.21 1.00 6.00   0.66  0.82\n  PES_10   150   0 0.00% 3.29 1.49 1.00 6.00   0.33  0.85\n  PES_11   150   0 0.00% 3.23 1.37 1.00 6.00   0.67  0.82\n```\n:::\n:::\n\n\n### Calculate the mean PES scores\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <-\n  dat %>%\n  mutate(PES = rowMeans(.[ ,c('PES_1', 'PES_2', 'PES_3', 'PES_4', 'PES_5', 'PES_6', 'PES_7', 'PES_8', 'PES_9', 'PES_10')])\n         )\n```\n:::\n\n\n### Body mass index (BMI)\n\nTo calculate the BMI, we assessed participants' height in feet and inches and their weight in stones and pounds. Participants had the option to leave the question for their weight unanswered, therefore there are some missing values in this variable.\n Some participants indicated decimals with commas instead of points. Therefore, we first changed all commas in the `weight` variable into points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- \n  dat %>% \n  mutate(weight = as.numeric(sub(\",\", \".\", weight, fixed=TRUE), na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `weight = as.numeric(sub(\",\", \".\", weight, fixed = TRUE), na.rm\n  = TRUE)`.\nCaused by warning:\n! NAs introduced by coercion\n```\n:::\n:::\n\n\nFirst, we transferred the height in feet and inches into height in inches by multiplying `height` by 12.\nSimilarly, we transferred the weight in stones and lbs into lbs by multiplying `weight` by 14.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- dat %>% \n  mutate(height_inches = height*12,\n         weight_lbs = weight*14)\n```\n:::\n\n\n\nNext, we calculated the body mass index (BMI), by dividing weight in lbs by height in inches squared, multiplied by 703.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <-\n  dat %>% \n  mutate(BMI = weight_lbs / height_inches^2 * 703)\n```\n:::\n\n\n\n\n# Save processed data\n Remove all unneeded variables and save the processed data as a CSV.\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  select(id, condition, random_app, BMI, PES, nutrition, allergy, \n         starts_with(c('base', 'condi')),\n         belief_ht_c1_R, belief_ht_c2_R, belief_ht_overall_R, preference,\n         starts_with('delivery')\n         )%>%\n  write_csv2('Data/Study1_data_processed.csv')\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}