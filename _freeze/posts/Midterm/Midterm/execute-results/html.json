{
  "hash": "f6bf51d23cc1b53162c9b071642aa6a2",
  "result": {
    "markdown": "---\ntitle: \" Midterm Project \"\nauthor: \"Hanan Yafai\"\ndate: \"2023-03-31\"\ncategories: [notes]\nimage: \"logo.png\"\ntheme: \"pulse\"\nhtml_document:\n toc: TRUE\n---\n\n\n## First part of the project: \n\n## equal to == \n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 == 1 # is 1 equal to 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] TRUE\n1 == 2 # is 1 equal to 2?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE\n\nc(1, 2, 3) == c(2, 1, 3) # compares each element with each element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE FALSE  TRUE\n1 == c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE  TRUE FALSE\n```\n:::\n\n\n### **not equal to !=**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 != 1 # is 1 equal to 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE\n1 != 2 # is 1 equal to 2?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] TRUE\n\nc(1, 2, 3) != c(2, 1, 3) # compares each element with each element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1]  TRUE  TRUE FALSE\n1 != c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1]  TRUE FALSE  TRUE\n```\n:::\n\n\n### **Greater than/ less than**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 > 1 # is 1 greater than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE\n5 > 1 # is 5 greater than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] TRUE\n3 < 2 # is 3 less than 2?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE\n3 < 1 # is 3 less than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE\n\nc(1, 2, 3) > c(2, 1, 3) # ask the question element by element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE  TRUE FALSE\nc(1, 2, 3) < c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1]  TRUE FALSE FALSE\n\n2 > c(1, 2, 3) # is greater than each of the numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1]  TRUE FALSE FALSE\n```\n:::\n\n\n### **\\>= \\<=** Is something greater than or equal to something else:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 >= 1 # is 1 greater than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] TRUE\n5 >= 1 # is 5 greater than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] TRUE\n3 <= 2 # is 3 less than 2?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE\n3 <= 1 # is 3 less than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE\n\nc(1, 2, 3) >= c(2, 1, 3) # ask the question element by element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE  TRUE  TRUE\nc(1, 2, 3) <= c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1]  TRUE FALSE  TRUE\n\n2 >= c(1, 2, 3) # is greater than each of the numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1]  TRUE  TRUE FALSE\n```\n:::\n\n\n### **AND**\n\n### The ampersand `&` is used for AND, which allows use to evaluate whether two or more properties are all TRUE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# is 16 divisible by 4 AND 8\n16 %% 4 == 0 & 16 %% 8 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] TRUE\n\n# is 16 divisible by 4 AND 3\n16 %% 4 == 0 & 16 %% 3 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE\n\n# is 16 divisible by 8 and 4 and 2\n16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] TRUE\n```\n:::\n\n\n### **OR**\n\nThe `|` is used for OR, which allows use to evaluate at least one of the properties is TRUE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# is 16 divisible by 4 OR 8\n16 %% 4 == 0 | 16 %% 8 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] TRUE\n\n# is 16 divisible by 4 OR 3\n# it is divisible by 4, so the answer is TRUE\n# because at least one of the comparisons is TRUE\n16 %% 4 == 0 | 16 %% 3 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] TRUE\n```\n:::\n\n\n### **TRUE FALSE**\n\nWhen R returns values as TRUE or FALSE, it return a logical variable. It also treats TRUE as a 1, and FALSE as a 0. In the example below we see it is possible sum up a logical variable with multiple TRUE and FALSE entries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1, 2, 3) == c(1, 2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] TRUE TRUE TRUE\nsum(c(1, 2, 3) == c(1, 2, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n#> [1] 3\n\nc(1, 2, 3) == c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE FALSE  TRUE\nsum(c(1, 2, 3) == c(2, 1, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n#> [1] 1\n```\n:::\n\n\n## **IF ELSE**\n\nIn other words, IF the situation is X, then do something; ELSE (if the situation is not X), then do something different. Generally, IF and ELSE statements are used inside loops (for, or while, or repeat loops), because at each step or iteration of the loop, we want to check something, and then do something.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n#> [1] 1\n\n\na <- 2 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A is not 1\"\n```\n:::\n\n```{.r .cell-code}\n#> [1] \"A is not 1\"\n```\n:::\n\n\nNormally we find IF and ELSE in a loop like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1, 0, 1, 0, 0, 0, 1) # make a variable contain 1s and 0s\n\n# write a loop to check each element in the variable\n# and do different things depending on the element\n\nfor (i in a) {\n  if (i == 1) {\n    print(\"I'm a 1\") # what to do when i is 1\n  } else {\n    print(\"I'm not a 1\") # what to do when i is not 1\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"I'm a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm a 1\"\n```\n:::\n\n```{.r .cell-code}\n#> [1] \"I'm a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm a 1\"\n```\n:::\n\n\n## Function syntax:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name <- function(input1, input2) {\n  #code here\n  return(something)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Declare a custom function to calculate the area of a circle\ncircle_area <- function(radius) {\n  pi * radius^2\n}\n\n# Call the function with a radius of 3\ncircle_area(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 28.27433\n```\n:::\n:::\n\n\n## Easier problems (1-15):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sum numbers from 1 to 100\nsum(1:100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5050\n```\n:::\n\n```{.r .cell-code}\n#1+2+3+4\na <- 0\nfor(i in 1:100){\n  a <- a+i\n}\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5050\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(50:100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3825\n```\n:::\n\n```{.r .cell-code}\nsum(500:1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 375750\n```\n:::\n\n```{.r .cell-code}\nsum_sequence <- function(min,max){\n  return(sum(min:max))\n  \n}\n\n\nsum_sequence(min = 5, max = 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5040\n```\n:::\n\n```{.r .cell-code}\nsum_sequence_loop <- function(min,max){\n  \n  a <- 0\n  \n  for(i in min:max){\n    a <- a+i\n  }\n  \n  return(a)\n  \n}\n\nsum_sequence_loop(1,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n random_numbers <-runif(n = 1000,min=0,max=1000)\n \n hist(random_numbers)\n```\n\n::: {.cell-output-display}\n![](Midterm_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  normal_numbers <-rnorm(n = 1000,0,10)\n \n hist(normal_numbers)\n```\n\n::: {.cell-output-display}\n![](Midterm_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n\n```{.r .cell-code}\n sample(1:6, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n## Write your own descriptive stats functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#using as few intrinsic functions as possible\n\n## mean\nsome_numbers <- 1:10\nmean(some_numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.5\n```\n:::\n\n```{.r .cell-code}\nmean_A <- function(x) {\n  return(sum(x) / length(x))\n}\nmean_A(some_numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.5\n```\n:::\n\n```{.r .cell-code}\n##\nsome_numbers <- 1:10\ntemp_sum <- 0\ntemp_length <- 0\nfor(i in some_numbers){\n  temp_sum <- temp_sum+i\n  temp_length <- temp_length+1\n}\ntemp_sum\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n\n```{.r .cell-code}\ntemp_length\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\ntemp_sum/temp_length\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.5\n```\n:::\n\n```{.r .cell-code}\nmean_B <- function(x){\n  \n  temp_sum <- 0\n  temp_length <- 0\n  for (i in x) {\n    temp_sum <- temp_sum + i\n    temp_length <- temp_length + 1\n  }\n  \n  return(temp_sum/temp_length)\n}\nmean_B(1:100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.5\n```\n:::\n:::\n\n\n\n# list all the odd numbers :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a vector with numbers 1 to 100\nnum_vector <- 1:100\n\n# filter the odd numbers using modulo operator\nodd_numbers <- num_vector[num_vector %% 2 != 0]\n\n# print the odd numbers\nprint(odd_numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n[26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99\n```\n:::\n:::\n\n# list all prime numbers from 1-100\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a vector with numbers 2 to 1000\nnum_vector <- 2:1000\n\n# create a vector to store the prime numbers\nprime_numbers <- c()\n\n# loop over the numbers in num_vector\nfor (num in num_vector) {\n  \n  # create a vector with numbers from 2 to num-1\n  divisor_vector <- 2:(num - 1)\n  \n  # check if the number is prime\n  if (length(divisor_vector[num %% divisor_vector == 0]) == 0) {\n    prime_numbers <- c(prime_numbers, num)\n  }\n}\n\n# print the prime numbers\nprint(prime_numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]   3   5   7  11  13  17  19  23  29  31  37  41  43  47  53  59  61  67\n [19]  71  73  79  83  89  97 101 103 107 109 113 127 131 137 139 149 151 157\n [37] 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257\n [55] 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367\n [73] 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467\n [91] 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599\n[109] 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709\n[127] 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829\n[145] 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967\n[163] 971 977 983 991 997\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a character vector\nmy_string <- \"Hello, World!\"\n\n# count the number of characters in the string variable\nnum_chars <- nchar(my_string)\n\n# print the number of characters\nprint(num_chars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13\n```\n:::\n\n```{.r .cell-code}\n# split the character vector using the strsplit() function\nsplit_string <- strsplit(my_string, \"\")\n\n# print the split character vector\nprint(split_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1] \"H\" \"e\" \"l\" \"l\" \"o\" \",\" \" \" \"W\" \"o\" \"r\" \"l\" \"d\" \"!\"\n```\n:::\n:::\n\n# count the number of sentences in a string variable by splitting it by the . character:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a string variable\nmy_string <- \"my nam is hanan. i am learning R programming .it is very fun .\"\n\n# split the string by the period character\nsentences <- strsplit(my_string, \"\\\\.\")[[1]]\n\n# count the number of sentences\nnum_sentences <- length(sentences)\n\n# print the number of sentences\nprint(num_sentences)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n# Do a logical test to see if one word is found within the text of another string variable:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define the test word and sentence\ntest_word <- \"fox\"\ntest_sentence <- \"is the word hello in this sentence\"\n\n# perform the logical test to see if the test word is contained in the test sentence\nis_word_in_sentence <- test_word %in% strsplit(test_sentence, \" \")[[1]]\n\n# print the result of the logical test\nprint(is_word_in_sentence)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\n\n## Hard problems:\n\n# Solve fizz buzz problem\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:100) {\n  if(i %% 3 == 0 & i %% 5 == 0) {\n    print(\"FizzBuzz\")\n  } else if(i %% 3 == 0) {\n    print(\"Fizz\")\n  } else if(i %% 5 == 0) {\n    print(\"Buzz\")\n  } else {\n    print(i)\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] \"Fizz\"\n[1] 4\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 7\n[1] 8\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 11\n[1] \"Fizz\"\n[1] 13\n[1] 14\n[1] \"FizzBuzz\"\n[1] 16\n[1] 17\n[1] \"Fizz\"\n[1] 19\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 22\n[1] 23\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 26\n[1] \"Fizz\"\n[1] 28\n[1] 29\n[1] \"FizzBuzz\"\n[1] 31\n[1] 32\n[1] \"Fizz\"\n[1] 34\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 37\n[1] 38\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 41\n[1] \"Fizz\"\n[1] 43\n[1] 44\n[1] \"FizzBuzz\"\n[1] 46\n[1] 47\n[1] \"Fizz\"\n[1] 49\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 52\n[1] 53\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 56\n[1] \"Fizz\"\n[1] 58\n[1] 59\n[1] \"FizzBuzz\"\n[1] 61\n[1] 62\n[1] \"Fizz\"\n[1] 64\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 67\n[1] 68\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 71\n[1] \"Fizz\"\n[1] 73\n[1] 74\n[1] \"FizzBuzz\"\n[1] 76\n[1] 77\n[1] \"Fizz\"\n[1] 79\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 82\n[1] 83\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 86\n[1] \"Fizz\"\n[1] 88\n[1] 89\n[1] \"FizzBuzz\"\n[1] 91\n[1] 92\n[1] \"Fizz\"\n[1] 94\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 97\n[1] 98\n[1] \"Fizz\"\n[1] \"Buzz\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# rolling a dice with sample\nsample(c(1,2,3,4,5,6),1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#> [1] 5\nsample(c(1,2,3,4,5,6),1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n#> [1] 4\nsample(c(1,2,3,4,5,6),1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n#> [1] 4\n```\n:::\n\n\n\n## snake and ladder attempt: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsnakes_and_ladders <- list(`14` = 4, `19` = 8, `24` = 16, `34` = 30, `40` = 28, `48` = 36, `54` = 46, `62` = 45, `64` = 60, `74` = 68, `89` = 53, `92` = 88, `95` = 75, `99` = 80)\n\n# Define a function to simulate one game of Snakes and Ladders\nplay_game <- function() {\n  total_sum <- 0\n  number_of_rolls <- 0\n  position <- 0  # start at the beginning of the board\n  \n  while(position < 25) {\n    number_of_rolls <- number_of_rolls + 1\n    roll <- sample(c(1, 2, 3, 4, 5, 6), 1)\n    total_sum <- total_sum + roll\n    \n    if(total_sum > 100) {\n      total_sum <- total_sum - roll\n    } else {\n      # Check if the roll lands on a ladder or a snake\n      new_position <- ifelse(names(snakes_and_ladders) == as.character(total_sum), unlist(snakes_and_ladders[as.character(total_sum)]), total_sum)\n      position <- ifelse(length(new_position) > 1, new_position[1], new_position)\n    }\n  }\n  \n  number_of_rolls\n}\n\n# Record the results from multiple simulations\nset.seed(123)\nsave_rolls <- replicate(100, play_game())\n\n# Estimate the average number of rolls needed to successfully complete the game\nmean(save_rolls)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.71\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsave_rolls<- c()\nfor(sims in 1:100){\n  curpos<-0 \n  number_of_rolls<-0\n\nwhile(curpos < 25){\n  curpos <- curpos+sample(c(1,2,3,4,5, 6) ,1)\n\n if ( curpos == 1){\ncurpos<-6\n}\nif (curpos == 6) {\n  curpos<-9\n}\n\nif ( curpos == 9) {\n curpos<- 12\n}\nif ( curpos == 12) \n curpos<-17\nif ( curpos ==17) {\n curpos<-20\n}\nif ( curpos == 20) {\n curpos<-24\n}\nif (curpos==24){\n curpos<-84\n}\nnumber_of_rolls <- number_of_rolls+1\n}\nsave_rolls[sims]<- number_of_rolls\n}\nmean(save_rolls)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.88\n```\n:::\n:::\n",
    "supporting": [
      "Midterm_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}