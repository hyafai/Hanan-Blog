{
  "hash": "f3a4b16302b56599a7199b617451a8fb",
  "result": {
    "markdown": "---\ntitle: \" Week4_Data type & Visualization\"\nauthor: \"Hanan Yafai\"\ndate: \"2023-02-27\"\ncategories: [notes]\nimage: \"visuals.png\"\n---\n\n\n\n\n**The different type of data:**\n\n1.  **Continuous** the variables always have a\\[numeric\\] data type. They are either integers like 42 or \\[doubles\\] a data type representing a real decimal number like 3.14159\n\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(10) # double \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(10.0) # double \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(10L) # integer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# r will assume that all numbers are double unless you add L to get rid of the dismal EX. (age)\ntypeof(10L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(10.99877634567)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n\n2.  **Categorical**:\n\n    -   Categorical variables can be nominal, where the categories don't really have an order, or ordinal where they have a clear order but the distance between the categories isn't something you could exactly equate.\n\n    <!-- -->\n\n    -   Categorical data can have a character data type, also called strings. Categorical data can also be factors, a specific type of integer that lets you specify the category names and their order.\n\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(-3, 0, .5)  # numeric vector\nf <- factor(x)     # convert to factor\nx == as.numeric(f) # does not convert back to numeric \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE\n```\n:::\n:::\n\n\n3.  **Date and Time data:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the current date\nlubridate::today()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-03-02\"\n```\n:::\n:::\n\n\n## **Tidy data:**\n\n**Is a format for data that maps the meaning onto the structure.**\n\nTidy data has three rules:\n\n-   Each \\[variable\\] must have its own column\n\n-   Each  \\[observation\\] must have its own row\n\n-   Each  \\[value\\] must have its own cell\n\nExample of tidy data :\n\n\n::: {.cell show_col_types='false'}\n\n```{.r .cell-code}\ntidy_data <- read.csv(\"data/tidy_data.csv\")\nprint(tidy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   customer_id year items price_per_item totalprice\n1            1 2018     2           3.91       7.82\n2            1 2019     8           4.72      37.76\n3            1 2020    10           5.59      55.90\n4            2 2018     1           3.91       3.91\n5            2 2019     6           4.72      28.32\n6            2 2020     1           5.59       5.59\n7            3 2018     4           3.91      15.64\n8            3 2019     5           4.72      23.60\n9            3 2020     5           5.59      27.95\n10           4 2018    10           3.91      39.10\n11           4 2019     1           4.72       4.72\n12           4 2020     3           5.59      16.77\n13           5 2018     3           3.91      11.73\n14           5 2019     9           4.72      42.48\n15           5 2020     8           5.59      44.72\n```\n:::\n:::\n\n\nExample of untidy data :\n\n\n::: {.cell show_col_types='false'}\n\n```{.r .cell-code}\nuntidy_data <- read.csv(\"data/untidy_data.csv\" )\nprint(untidy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  customer_id itemsprice_2018 itemsprice_2019 itemsprice_2020 totalprice_2018\n1           1        2 (3.91)        8 (4.72)       10 (5.59)            7.82\n2           2        1 (3.91)        6 (4.72)        1 (5.59)            3.91\n3           3        4 (3.91)        5 (4.72)        5 (5.59)           15.64\n4           4       10 (3.91)        1 (4.72)        3 (5.59)           39.10\n5           5        3 (3.91)        9 (4.72)        8 (5.59)           11.73\n  totalprice_2019 totalprice_2020\n1           37.76           55.90\n2           28.32            5.59\n3           23.60           27.95\n4            4.72           16.77\n5           42.48           44.72\n```\n:::\n:::\n\n\n-   **Plotting the data:**\n\n    -   A grammar of graphics (the \"gg\" in \"ggplot\") is a standardized way to describe the components of a graphic. ggplot2 uses a layered grammar of graphics, in which plots are built up in a series of layers. \n\n[**The layer concepts:**]{.underline}\n\nFirst, the plot space is built *(layer 1)*; the variables are specified *(layer 2);* the type of visualization (known as a geom) that is desired for these variables is specified *(layer 3)*.\n\ngeom_point()is called to visualize individual data points; a second geom is added to include a line of best fit *(layer 4),* the axis labels are edited for readability *(layer 5)*, and finally, a theme is applied to change the overall appearance of the plot (*layer 6).*\n\nggplot example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_data <-read.csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\nhead(survey_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  caller_id employee_id           call_start wait_time call_time issue_category\n1      C001         E01 2020-09-22T10:47:54Z       169        34           tech\n2      C002         E01 2020-09-07T22:10:25Z       206        52           tech\n3      C003         E01 2020-07-06T12:08:59Z       207        41           tech\n4      C004         E01 2020-02-20T13:12:03Z       132        16           tech\n5      C005         E01 2020-11-08T17:42:10Z       178        20        returns\n6      C006         E01 2020-06-01T19:06:12Z       230        46        returns\n  satisfaction\n1            3\n2            2\n3            2\n4            4\n5            3\n6            2\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(data = survey_data, \n       mapping = aes(x=wait_time, \n                   y= satisfaction,\n                   color= wait_time,\n             size= satisfaction)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](data-vis_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nTips:\n\n-   lm stands for linear model\n\ngeom_smooth(method = \"lm\")\nggplot(data = survey_data,\nmapping = aes(x=wait_time, ))\n\n-   \\|fig-width:\n\n-   glimpse (starwars_copy)\n",
    "supporting": [
      "data-vis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}