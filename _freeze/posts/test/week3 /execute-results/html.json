{
  "hash": "09a95578cf722e10c029d85d54135b0b",
  "result": {
    "markdown": "---\ntitle: \" Week3_qmd\"\nauthor: \"Hanan Yafai\"\ndate: \"2023-02-15\"\ncategories: [notes]\nimage: \"logo.png\"\ntheme: \"pulse\"\nhtml_document:\n toc: TRUE\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)   # data wrangling functions\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(rtweet)      # for searching tweets\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'rtweet'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n```\n:::\n\n```{.r .cell-code}\nlibrary(kableExtra)  # for nice tables\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntweets<- readRDS(\"ncod_tweets.rds\")\n\nhist(tweets$favorite_count)\n```\n\n::: {.cell-output-display}\n![](week3-_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(tweets, aes(x= favorite_count))+\n  geom_histogram ()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](week3-_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nfiltered_data <- tweets %>%\n  filter()\n```\n:::\n\n\nThe summarise() function from the dplyr package is loaded as part of the tidyverse and creates summary statistics. It creates a new table with columns that summarise the data from a larger table using summary functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfavorite_summary<- summarise(tweets,\n                             mean_favs= mean(favorite_count),\n                             median_favs= median(favorite_count),\n                             min_favs= min(favorite_count),\n                             sd_favs= sd(favorite_count))\n\nfavorite_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  mean_favs median_favs min_favs sd_favs\n      <dbl>       <dbl>    <int>   <dbl>\n1      29.7           3        0    330.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tweets, aes(x = favorite_count)) +\n  geom_histogram(bins = 25) +\n  scale_x_continuous(trans = \"pseudo_log\", \n                     breaks = c(0, 1, 10, 100, 1000, 10000))\n```\n\n::: {.cell-output-display}\n![](week3-_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntweet_summary <- tweets %>%\n  summarise(mean_favs = mean(favorite_count),\n            median_favs = quantile(favorite_count, .5),\n            n = n(),\n            min_date = min(created_at),\n            max_date = max(created_at))\n\nglimpse(tweet_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 5\n$ mean_favs   <dbl> 29.71732\n$ median_favs <dbl> 3\n$ n           <int> 28626\n$ min_date    <dttm> 2021-10-10 00:10:02\n$ max_date    <dttm> 2021-10-12 20:12:27\n```\n:::\n:::\n\n\nThe \\$ operator: The dollar sign allows you to select items from an object, such as columns from a table. The left-hand side is the object, and the right-hand side is the item. When you call a column like this, R will print all the observations in that column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweet_summary$mean_favs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 29.71732\n```\n:::\n\n```{.r .cell-code}\ntweets$source[1] # select one observation\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Twitter for Android\"\n```\n:::\n\n```{.r .cell-code}\ntweets$display_text_width[c(20,30,40)] # select multiple with c()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  78 287 107\n```\n:::\n:::\n\n\nPipes allow you to send the output from one function straight into another function. Specifically, they send the result of the function before %\\>% to be the first argument of the function after %\\>%. It can be useful to translate the pipe as \"and then\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweet_summary <- tweets %>% # start with the object tweets and then\n  summarise(mean_favs = mean(favorite_count), #summarise it\n            median_favs = median(favorite_count))\n```\n:::\n\n\nInline coding To insert those values into the text of a report you can use inline coding. First. we'll create another set of objects that contain the first and last date of the tweets in our dataset. format() formats the dates to day/month/year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndate_from <- tweet_summary$min_date %>% \n  format(\"%d %B, %Y\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `min_date`.\n```\n:::\n\n```{.r .cell-code}\ndate_to <- tweet_summary$max_date %>% \n  format(\"%d %B, %Y\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `max_date`.\n```\n:::\n:::\n\n\nThere were  tweets between NULL and NULL.\n\nextra challenge\n\nArt_in_DOE_Buildings\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nArt_in_DOE_buildings <- read_csv(\"Art_in_DOE_buildings.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 2273 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): Artwork Title, Artist_Lastname, Artist_FirstName, Medium, Artwork Y...\nnum (1): Accession\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nView(Art_in_DOE_buildings)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nNYC_School_Art <- summarise(Art_in_DOE_buildings,\n                      Artist_FirstName,\n                      Artist_Lastname,\n                      Borough,\n                      Medium)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n```\n:::\n\n```{.r .cell-code}\nNYC_School_Art\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,273 × 4\n   Artist_FirstName Artist_Lastname Borough   Medium           \n   <chr>            <chr>           <chr>     <chr>            \n 1 COSTANTINO       NIVOLA          MANHATTAN CONCRETE         \n 2 COSTANTINO       NIVOLA          MANHATTAN CONCRETE         \n 3 COSTANTINO       NIVOLA          MANHATTAN CONCRETE         \n 4 OTELLO           GUARDUCCI       MANHATTAN CAST STONE       \n 5 JOHN             MATT            MANHATTAN BRONZE           \n 6 JACK             HASTINGS        MANHATTAN BRONZE           \n 7 WILLIAM          TARR            399       STEEL, WEATHERING\n 8 JOHN             TERKEN          BRONX     METAL PAINTED    \n 9 GWEN             LUX             MANHATTAN MOSAIC           \n10 GWEN             LUX             MANHATTAN GLASS            \n# … with 2,263 more rows\n```\n:::\n:::\n",
    "supporting": [
      "week3-_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}