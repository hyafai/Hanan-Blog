{
  "hash": "ede0142c522cea1ef0e80063c3e24c27",
  "result": {
    "markdown": "---\ntitle: \" Week5_Data import\"\nauthor: \"Hanan Yafai\"\ndate: \"2023-02-27\"\ncategories: [notes]\nimage: \"logo.png\"\ntheme: \"pulse\"\nhtml_document:\n toc: TRUE\n---\n\n\n\n\n## **Built-in data**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#The data() function lists the datasets available.\ndata(\"table1\")\n```\n:::\n\n\n## **Looking at data**\n\nThere are three main ways to look at your data in our case its table: [`View()`](https://rdrr.io/r/utils/View.html), [`print()`](https://rdrr.io/r/base/print.html), [`tibble::glimpse()`](https://pillar.r-lib.org/reference/glimpse.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(table1)\n# call print explicitly\nprint(table1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n\n```{.r .cell-code}\n# more common method of just calling object name\ntable1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n:::\n\n\n\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n```\n:::\n:::\n\n\n\n\n# **Importing data**\n\nThe rio package has very straightforward functions for reading and saving data in most common formats: [`rio::import()`](https://rdrr.io/pkg/rio/man/import.html) and [`rio::export()`](https://rdrr.io/pkg/rio/man/export.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo_tsv  <- import(\"data/demo.tsv\")  # tab-separated values\ndemo_csv  <- import(\"data/demo.csv\")  # comma-separated values\ndemo_xls  <- import(\"data/demo.xlsx\") # Excel format\ndemo_sav  <- import(\"data/demo.sav\")  # SPSS format\n```\n:::\n\n\n-   it is also useful to know the specific functions that are used to import different file types because it is easier to discover features to deal with complicated cases, such as when you need to skip rows, rename columns, or choose which Excel sheet to use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo_tsv <- readr::read_tsv(\"data/demo.tsv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (2): character, factor\ndbl  (2): integer, double\nlgl  (1): logical\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ndemo_csv <- readr::read_csv(\"data/demo.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): character, factor\ndbl  (2): integer, double\nlgl  (1): logical\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ndemo_xls <- readxl::read_excel(\"data/demo.xlsx\")\ndemo_sav <- haven::read_sav(\"data/demo.sav\")\n```\n:::\n\n\nif you keep data in Google Sheets, you can access it directly from R using `<pkg>googlesheets4\",\"https://googlesheets4.tidyverse.org/\")`. The code below imports data from a [public sheet](https://docs.google.com/spreadsheets/d/16dkq0YL0J7fyAwT1pdgj1bNNrheckAU_2-DKuuM6aGI). You can set the `ss` argument to the entire [URL](https://psyteachr.github.io/glossary/u#url \"The address of a web page (uniform resource locator)\") for the target sheet, or just the section after \"https://docs.google.com/spreadsheets/d/\".\n\n\n\n\n\nThe readr functions display a message when you import data explaining what [data type](https://psyteachr.github.io/glossary/d#data-type \"The kind of data represented by an object.\") each column is.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo <- readr::read_csv(\"data/demo.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): character, factor\ndbl  (2): integer, double\nlgl  (1): logical\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n# Creating data:\n\n-   When creating a small data table from scratch in R, use the [`tibble::tibble()`](https://tibble.tidyverse.org/reference/tibble.html) function, and type the data right in. The `tibble` package is part of the [tidyverse](https://psyteachr.github.io/glossary/t#tidyverse \"A set of R packages that help you create and work with tidy data\") package that we loaded at the start of this chapter\n\n\n::: {.cell}\n\n```{.r .cell-code}\navatar <- tibble(\n  name = c(\"Katara\", \"Toph\", \"Sokka\"),\n  bends = c(\"water\", \"earth\", NA),\n  friendly = TRUE\n)\n\n# print it\navatar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  name   bends friendly\n  <chr>  <chr> <lgl>   \n1 Katara water TRUE    \n2 Toph   earth TRUE    \n3 Sokka  <NA>  TRUE    \n```\n:::\n:::\n\n\nYou can also use the [`tibble::tribble()`](https://tibble.tidyverse.org/reference/tribble.html) function to create a table by row, rather than by column. You start by listing the column names, each preceded by a tilde (`~`), then you list the values for each column, row by row, separated by commas (don't forget a comma at the end of each row).\n\n\n::: {.cell}\n\n```{.r .cell-code}\navatar_by_row <- tribble(\n  ~name,    ~bends,  ~friendly,\n  \"Katara\", \"water\", TRUE,\n  \"Toph\",   \"earth\", TRUE,\n  \"Sokka\",  NA,      TRUE\n)\n```\n:::\n\n\n## **Writing data:**\n\n-   example of writing my data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create the table\nfamily <- tribble(\n  ~first_name, ~last_name, ~age,\n  \"saba\", \"alammari\", 35,\n  \"karim\", \"yafai\", 40\n)\n\n# save the data to CSV\nexport(family, \"data/family.csv\")\n\n# remove the object from the environment\n#remove(family)\n\n# load the data\nfamily <- import(\"data/family.csv\")\nprint(family)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  first_name last_name age\n1       saba  alammari  35\n2      karim     yafai  40\n```\n:::\n:::\n\n\n-   Writing data using Google sheets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# authorise your account \n# this only needs to be done once per script\n#gs4_deauth()\n#gs4_auth(email = \"yafai.h12@gmail.com\")\n# create a new sheet\n#sheet_id <- gs4_create(name = \"demo-file\", \n #                      sheets = \"letters\")\n\n# define the data table to save\n#letter_data <- tibble(\n#  character = LETTERS[1:5],\n#  integer = 1:5,\n#  double = c(1.1, 2.2, 3.3, 4.4, 5.5),\n#  logical = c(T, F, T, F, T),\n#  date = lubridate::today()\n#)\n\n#write_sheet(data = letter_data, \n #           ss = sheet_id, \n #           sheet = \"letters\")\n\n## append some data\n#new_data <- tibble(\n#  character = \"F\",\n#  integer = 6L,\n#  double = 6.6,\n # logical = FALSE,\n#  date = lubridate::today()\n#)\n#sheet_append(data = new_data,\n#             ss = sheet_id,\n#             sheet = \"letters\")\n\n# read the data\n#demo <- read_sheet(ss = sheet_id, sheet = \"letters\")\n#glimpse(sheet_id)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}