[
  {
    "objectID": "posts/week3_qmd /week3 .html",
    "href": "posts/week3_qmd /week3 .html",
    "title": "test_qmd",
    "section": "",
    "text": "Assignment check list:\n\nBe able to make a new .qmd document -\n\nYes\n\nBe able to render a .qmd document\n\nyes\n\nExplain the difference between the source editor view and visual editor view in Rstudio.\nplain text, all characters will be displayed exactly VS. in visual will render any text as rmarkdown text (will directly show the formatted texts ex: bold vs **bold **)\nBe able to insert simple markdown plain text (headers, lists, paragraphs), and render the document.\n\ndone\n\nBe aware of resources to help you learn more about markdown options.\n\ndone\n\nBe able to insert an R code chunk, and show the output in the rendered document.\n\nmacro for quick insert\n\n\n\n\n[1] 2\n\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12\n\n\n[1] 1 2 3 4\n\n\n\nRunning R code chunks in a qmd\n\npressing play\ncopy/paste into console\nhighlight then command-enter (mac)\nprecedence issues (first to last)\n( done)\n\nBe aware of R code chunk options, and how to use eval, messages, error, warning, and echo.\n(done)\nBe able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence .\n\ncode chunk options per chunk\nglobal option :\n\nset options for the entire document in the first chunk\n\nknitr::opts_chunk$set(message = TRUE)\n\nWrite inline r code.\n\n\n\n\nMy name is hanan and I am 21 years old. It is 1 days until Ramadan, which is my favorite religious month & holiday.\n\nExplain how the rendering environment is different from the Rstudio environment.\n\nThe rendering environment runs (execute) the code and embeds results and text into an (Rmd) document. The Rstudio Environment is a collection of objects such as functions, variables, data and so on that is present in the current R session.\n\nBe aware of more advanced quarto options for html documents, and try some of the options.\n\n( done by exploring and changing the blog theme using qurto options for html doc)"
  },
  {
    "objectID": "posts/tips sheet /index.html",
    "href": "posts/tips sheet /index.html",
    "title": "Tips Sheet",
    "section": "",
    "text": "To customize how R Studio looks in a way that works for you Click:\n\nTools > Global Options > Appearance\n\nTo install packages this is done using install.packages()\n\nImportant : Never install a package from inside a script. Only do this from the console pane or the packages tab of the lower right pane.\nto load a package this is done using the library() function\n\nYou can type ?function_name in the console to access the help file.\nTab auto-complete\nIf you write the name of the function and then press the tab key, R Studio will show you the arguments that function takes along with a brief description\nArguments : sample(x, size, replace = FALSE, prob = NULL)\n\n x is the list of items we want to choose from, size is the number of items we want to choose, replace is whether or not each item may be selected more than once, and prob gives the probability that each item is chosen. it will use defaults of FALSE (each item can only be chosen once) and NULL (all items will have equal probability of being chosen).\nExample:\n\nsample(size = 5, replace = TRUE, x = letters)\n\n[1] \"c\" \"t\" \"o\" \"u\" \"p\"\n\n\n\nObjects can contain numbers, words, or the result of operations and analyses.\n\nYou assign content to an object using <-\n\n\n\nFor (text) data In order for R to recognize it as text, it must be enclosed in double quotation marks \" \" You cant do this for numeric data.\nTo print the contents of an object, type the object’s name in the console and press enter.\n\nHow to commit and push changes to github:\n\nMake changes to your blog, like writing a new post, or editing an old one.\nRender the website in R-studio. What you see here should be what you will see later on Github.com\nOpen Github Desktop and Commit your changes, by writing brief commit title, and pressing commit.\nThen, use Github Desktop to Push your changes to github.com.\nWait half a minute or so, and you should see your new content appear on the website.\n\n\nAlways add line between your commands\n\nTo quickly make the r code block click at the same time:\n(options+ command + I).\n$ sign give you a list of things inside your table"
  },
  {
    "objectID": "posts/Week 4_Data vis/data vis.html",
    "href": "posts/Week 4_Data vis/data vis.html",
    "title": "Week4_Data type & Visualization",
    "section": "",
    "text": "The different type of data:\nExample:\nExample:"
  },
  {
    "objectID": "posts/Week 4_Data vis/data vis.html#tidy-data",
    "href": "posts/Week 4_Data vis/data vis.html#tidy-data",
    "title": "Week4_Data type & Visualization",
    "section": "Tidy data:",
    "text": "Tidy data:\nIs a format for data that maps the meaning onto the structure.\nTidy data has three rules:\n\nEach [variable] must have its own column\nEach  [observation] must have its own row\nEach  [value] must have its own cell\n\nExample of tidy data :\n\ntidy_data <- read.csv(\"data/tidy_data.csv\")\nprint(tidy_data)\n\n   customer_id year items price_per_item totalprice\n1            1 2018     2           3.91       7.82\n2            1 2019     8           4.72      37.76\n3            1 2020    10           5.59      55.90\n4            2 2018     1           3.91       3.91\n5            2 2019     6           4.72      28.32\n6            2 2020     1           5.59       5.59\n7            3 2018     4           3.91      15.64\n8            3 2019     5           4.72      23.60\n9            3 2020     5           5.59      27.95\n10           4 2018    10           3.91      39.10\n11           4 2019     1           4.72       4.72\n12           4 2020     3           5.59      16.77\n13           5 2018     3           3.91      11.73\n14           5 2019     9           4.72      42.48\n15           5 2020     8           5.59      44.72\n\n\nExample of untidy data :\n\nuntidy_data <- read.csv(\"data/untidy_data.csv\" )\nprint(untidy_data)\n\n  customer_id itemsprice_2018 itemsprice_2019 itemsprice_2020 totalprice_2018\n1           1        2 (3.91)        8 (4.72)       10 (5.59)            7.82\n2           2        1 (3.91)        6 (4.72)        1 (5.59)            3.91\n3           3        4 (3.91)        5 (4.72)        5 (5.59)           15.64\n4           4       10 (3.91)        1 (4.72)        3 (5.59)           39.10\n5           5        3 (3.91)        9 (4.72)        8 (5.59)           11.73\n  totalprice_2019 totalprice_2020\n1           37.76           55.90\n2           28.32            5.59\n3           23.60           27.95\n4            4.72           16.77\n5           42.48           44.72\n\n\n\nPlotting the data:\n\nA grammar of graphics (the “gg” in “ggplot”) is a standardized way to describe the components of a graphic. ggplot2 uses a layered grammar of graphics, in which plots are built up in a series of layers. \n\n\nThe layer concepts:\nFirst, the plot space is built (layer 1); the variables are specified (layer 2); the type of visualization (known as a geom) that is desired for these variables is specified (layer 3).\ngeom_point()is called to visualize individual data points; a second geom is added to include a line of best fit (layer 4), the axis labels are edited for readability (layer 5), and finally, a theme is applied to change the overall appearance of the plot (layer 6).\nggplot example:\n\nsurvey_data <-read.csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\nhead(survey_data)\n\n  caller_id employee_id           call_start wait_time call_time issue_category\n1      C001         E01 2020-09-22T10:47:54Z       169        34           tech\n2      C002         E01 2020-09-07T22:10:25Z       206        52           tech\n3      C003         E01 2020-07-06T12:08:59Z       207        41           tech\n4      C004         E01 2020-02-20T13:12:03Z       132        16           tech\n5      C005         E01 2020-11-08T17:42:10Z       178        20        returns\n6      C006         E01 2020-06-01T19:06:12Z       230        46        returns\n  satisfaction\n1            3\n2            2\n3            2\n4            4\n5            3\n6            2\n\nlibrary(ggplot2)\nggplot(data = survey_data, \n       mapping = aes(x=wait_time, \n                   y= satisfaction,\n                   color= wait_time,\n             size= satisfaction)) +\n  geom_point()\n\n\n\n\nTips:\n\nlm stands for linear model\n\ngeom_smooth(method = “lm”) ggplot(data = survey_data, mapping = aes(x=wait_time, ))\n\n|fig-width:\nglimpse (starwars_copy)"
  },
  {
    "objectID": "posts/week5_ Data import /Week5_Data import.html",
    "href": "posts/week5_ Data import /Week5_Data import.html",
    "title": "Week5_Data import",
    "section": "",
    "text": "#The data() function lists the datasets available.\ndata(\"table1\")"
  },
  {
    "objectID": "posts/week5_ Data import /Week5_Data import.html#looking-at-data",
    "href": "posts/week5_ Data import /Week5_Data import.html#looking-at-data",
    "title": "Week5_Data import",
    "section": "Looking at data",
    "text": "Looking at data\nThere are three main ways to look at your data in our case its table: View(), print(), tibble::glimpse().\n\nView(table1)\n# call print explicitly\nprint(table1)\n\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n# more common method of just calling object name\ntable1\n\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\n\n\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "posts/week5_ Data import /Week5_Data import.html#writing-data",
    "href": "posts/week5_ Data import /Week5_Data import.html#writing-data",
    "title": "Week5_Data import",
    "section": "Writing data:",
    "text": "Writing data:\n\nexample of writing my data\n\n\n# create the table\nfamily <- tribble(\n  ~first_name, ~last_name, ~age,\n  \"saba\", \"alammari\", 35,\n  \"karim\", \"yafai\", 40\n)\n\n# save the data to CSV\nexport(family, \"data/family.csv\")\n\n# remove the object from the environment\n#remove(family)\n\n# load the data\nfamily <- import(\"data/family.csv\")\nprint(family)\n\n  first_name last_name age\n1       saba  alammari  35\n2      karim     yafai  40\n\n\n\nWriting data using Google sheets:\n\n\n# authorise your account \n# this only needs to be done once per script\n#gs4_deauth()\n#gs4_auth(email = \"yafai.h12@gmail.com\")\n# create a new sheet\n#sheet_id <- gs4_create(name = \"demo-file\", \n #                      sheets = \"letters\")\n\n# define the data table to save\n#letter_data <- tibble(\n#  character = LETTERS[1:5],\n#  integer = 1:5,\n#  double = c(1.1, 2.2, 3.3, 4.4, 5.5),\n#  logical = c(T, F, T, F, T),\n#  date = lubridate::today()\n#)\n\n#write_sheet(data = letter_data, \n #           ss = sheet_id, \n #           sheet = \"letters\")\n\n## append some data\n#new_data <- tibble(\n#  character = \"F\",\n#  integer = 6L,\n#  double = 6.6,\n # logical = FALSE,\n#  date = lubridate::today()\n#)\n#sheet_append(data = new_data,\n#             ss = sheet_id,\n#             sheet = \"letters\")\n\n# read the data\n#demo <- read_sheet(ss = sheet_id, sheet = \"letters\")\n#glimpse(sheet_id)"
  },
  {
    "objectID": "posts/Week6_qmd /data summaries .html",
    "href": "posts/Week6_qmd /data summaries .html",
    "title": "Data Summaries",
    "section": "",
    "text": "library(tidyverse)   # data wrangling functions\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(rtweet)      # for searching tweets\n\n\nAttaching package: 'rtweet'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\nlibrary(kableExtra)  # for nice tables\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\n\ntweets<- readRDS(\"ncod_tweets.rds\")\n\n\n\nhist(tweets$favorite_count)\n\n\n\nggplot(tweets, aes(x= favorite_count))+\n  geom_histogram ()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nlibrary(dplyr)\n\nfiltered_data <- tweets %>%\n  filter()\n\nThe summarise() function from the dplyr package is loaded as part of the tidyverse and creates summary statistics. It creates a new table with columns that summarise the data from a larger table using summary functions.\n\nfavorite_summary<- summarise(tweets,\n                             mean_favs= mean(favorite_count),\n                             median_favs= median(favorite_count),\n                             min_favs= min(favorite_count),\n                             sd_favs= sd(favorite_count))\n\nfavorite_summary\n\n# A tibble: 1 × 4\n  mean_favs median_favs min_favs sd_favs\n      <dbl>       <dbl>    <int>   <dbl>\n1      29.7           3        0    330.\n\n\n\nggplot(tweets, aes(x = favorite_count)) +\n  geom_histogram(bins = 25) +\n  scale_x_continuous(trans = \"pseudo_log\", \n                     breaks = c(0, 1, 10, 100, 1000, 10000))\n\n\n\n\n\ntweet_summary <- tweets %>%\n  summarise(mean_favs = mean(favorite_count),\n            median_favs = quantile(favorite_count, .5),\n            n = n(),\n            min_date = min(created_at),\n            max_date = max(created_at))\n\nglimpse(tweet_summary)\n\nRows: 1\nColumns: 5\n$ mean_favs   <dbl> 29.71732\n$ median_favs <dbl> 3\n$ n           <int> 28626\n$ min_date    <dttm> 2021-10-10 00:10:02\n$ max_date    <dttm> 2021-10-12 20:12:27\n\n\nThe $ operator: The dollar sign allows you to select items from an object, such as columns from a table. The left-hand side is the object, and the right-hand side is the item. When you call a column like this, R will print all the observations in that column.\n\ntweet_summary$mean_favs\n\n[1] 29.71732\n\ntweets$source[1] # select one observation\n\n[1] \"Twitter for Android\"\n\ntweets$display_text_width[c(20,30,40)] # select multiple with c()\n\n[1]  78 287 107\n\n\nPipes allow you to send the output from one function straight into another function. Specifically, they send the result of the function before %>% to be the first argument of the function after %>%. It can be useful to translate the pipe as “and then”.\n\ntweet_summary <- tweets %>% # start with the object tweets and then\n  summarise(mean_favs = mean(favorite_count), #summarise it\n            median_favs = median(favorite_count))\n\nInline coding To insert those values into the text of a report you can use inline coding. First. we’ll create another set of objects that contain the first and last date of the tweets in our dataset. format() formats the dates to day/month/year.\n\ndate_from <- tweet_summary$min_date %>% \n  format(\"%d %B, %Y\")\n\nWarning: Unknown or uninitialised column: `min_date`.\n\ndate_to <- tweet_summary$max_date %>% \n  format(\"%d %B, %Y\")\n\nWarning: Unknown or uninitialised column: `max_date`.\n\n\nThere were tweets between NULL and NULL.\nextra challenge\nArt_in_DOE_Buildings\n\nlibrary(readr)\nArt_in_DOE_buildings <- read_csv(\"Art_in_DOE_buildings.csv\")\n\nRows: 2273 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): Artwork Title, Artist_Lastname, Artist_FirstName, Medium, Artwork Y...\nnum (1): Accession\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nView(Art_in_DOE_buildings)\n\n\nNYC_School_Art <- summarise(Art_in_DOE_buildings,\n                      Artist_FirstName,\n                      Artist_Lastname,\n                      Borough,\n                      Medium)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nNYC_School_Art\n\n# A tibble: 2,273 × 4\n   Artist_FirstName Artist_Lastname Borough   Medium           \n   <chr>            <chr>           <chr>     <chr>            \n 1 COSTANTINO       NIVOLA          MANHATTAN CONCRETE         \n 2 COSTANTINO       NIVOLA          MANHATTAN CONCRETE         \n 3 COSTANTINO       NIVOLA          MANHATTAN CONCRETE         \n 4 OTELLO           GUARDUCCI       MANHATTAN CAST STONE       \n 5 JOHN             MATT            MANHATTAN BRONZE           \n 6 JACK             HASTINGS        MANHATTAN BRONZE           \n 7 WILLIAM          TARR            399       STEEL, WEATHERING\n 8 JOHN             TERKEN          BRONX     METAL PAINTED    \n 9 GWEN             LUX             MANHATTAN MOSAIC           \n10 GWEN             LUX             MANHATTAN GLASS            \n# … with 2,263 more rows\n\n\nArtwork Title Artist_Lastname Artist_FirstName Medium Artwork Year Dimension BLDGID School Name Borough"
  },
  {
    "objectID": "posts/my new posts /index.html",
    "href": "posts/my new posts /index.html",
    "title": "My Journey with R",
    "section": "",
    "text": "This section of my blog will be dedicated to sharing my progress in R, some thoughts of the journey including the ups and downs."
  },
  {
    "objectID": "posts/Midterm/Midterm.html",
    "href": "posts/Midterm/Midterm.html",
    "title": "LOGICS, LOOPS & FUNCTIONS",
    "section": "",
    "text": "1 == 1 # is 1 equal to 1?\n\n[1] TRUE\n\n#> [1] TRUE\n1 == 2 # is 1 equal to 2?\n\n[1] FALSE\n\n#> [1] FALSE\n\nc(1, 2, 3) == c(2, 1, 3) # compares each element with each element\n\n[1] FALSE FALSE  TRUE\n\n#> [1] FALSE FALSE  TRUE\n1 == c(2, 1, 3)\n\n[1] FALSE  TRUE FALSE\n\n#> [1] FALSE  TRUE FALSE"
  },
  {
    "objectID": "posts/Midterm/Midterm.html#if-else",
    "href": "posts/Midterm/Midterm.html#if-else",
    "title": "Midterm Project",
    "section": "IF ELSE",
    "text": "IF ELSE\nIn other words, IF the situation is X, then do something; ELSE (if the situation is not X), then do something different. Generally, IF and ELSE statements are used inside loops (for, or while, or repeat loops), because at each step or iteration of the loop, we want to check something, and then do something.\n\na <- 1 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n\n[1] 1\n\n#> [1] 1\n\n\na <- 2 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n\n[1] \"A is not 1\"\n\n#> [1] \"A is not 1\"\n\nNormally we find IF and ELSE in a loop like this:\n\na <- c(1, 0, 1, 0, 0, 0, 1) # make a variable contain 1s and 0s\n\n# write a loop to check each element in the variable\n# and do different things depending on the element\n\nfor (i in a) {\n  if (i == 1) {\n    print(\"I'm a 1\") # what to do when i is 1\n  } else {\n    print(\"I'm not a 1\") # what to do when i is not 1\n  }\n}\n\n[1] \"I'm a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm a 1\"\n\n#> [1] \"I'm a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm a 1\""
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hanan-blog",
    "section": "",
    "text": "Midterm Project\n\n\n\n\n\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nMar 31, 2023\n\n\nHanan Yafai\n\n\n\n\n\n\n  \n\n\n\n\nData_Summaries\n\n\n\n\n\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nHanan Yafai\n\n\n\n\n\n\n  \n\n\n\n\nVideo game review report\n\n\n\n\n\n\n\nReport\n\n\n\n\n\n\n\n\n\n\n\nMar 27, 2023\n\n\nHanan Yafai\n\n\n\n\n\n\n  \n\n\n\n\nWeek4_Data type & Visualization\n\n\n\n\n\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nFeb 27, 2023\n\n\nHanan Yafai\n\n\n\n\n\n\n  \n\n\n\n\nWeek5_Data import\n\n\n\n\n\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nFeb 27, 2023\n\n\nHanan Yafai\n\n\n\n\n\n\n  \n\n\n\n\nweek3_qmd\n\n\n\n\n\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nFeb 15, 2023\n\n\nHanan Yafai\n\n\n\n\n\n\n  \n\n\n\n\nLOGICS & LOOPS\n\n\n\n\n\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nFeb 15, 2023\n\n\nHanan Yafai\n\n\n\n\n\n\n  \n\n\n\n\nTips Sheet\n\n\n\n\n\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nFeb 6, 2023\n\n\nHanan Yafai\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJan 27, 2023\n\n\nHanan Yafai\n\n\n\n\n\n\n  \n\n\n\n\nMy Journey with R\n\n\n\n\n\n\n\nThoughts\n\n\n\n\n\n\n\n\n\n\n\nJan 27, 2023\n\n\nHanan Yafai\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/test/week3 .html",
    "href": "posts/test/week3 .html",
    "title": "Data_Summaries",
    "section": "",
    "text": "tweets<- readRDS(\"ncod_tweets.rds\")\n\nhist(tweets$favorite_count)\n\n\n\nggplot(tweets, aes(x= favorite_count))+\n  geom_histogram ()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nlibrary(dplyr)\n\nfiltered_data <- tweets %>%\n  filter()\n\n\nThe summarise() function from the dplyr package is loaded as part of the tidyverse and creates summary statistics. It creates a new table with columns that summarise the data from a larger table using summary functions.\n\n\nfavorite_summary<- summarise(tweets,\n                             mean_favs= mean(favorite_count),\n                             median_favs= median(favorite_count),\n                             min_favs= min(favorite_count),\n                             sd_favs= sd(favorite_count))\n\nfavorite_summary\n\n# A tibble: 1 × 4\n  mean_favs median_favs min_favs sd_favs\n      <dbl>       <dbl>    <int>   <dbl>\n1      29.7           3        0    330.\n\n\n\nggplot(tweets, aes(x = favorite_count)) +\n  geom_histogram(bins = 25) +\n  scale_x_continuous(trans = \"pseudo_log\", \n                     breaks = c(0, 1, 10, 100, 1000, 10000))\n\n\n\n\n\ntweet_summary <- tweets %>%\n  summarise(mean_favs = mean(favorite_count),\n            median_favs = quantile(favorite_count, .5),\n            n = n(),\n            min_date = min(created_at),\n            max_date = max(created_at))\n\nglimpse(tweet_summary)\n\nRows: 1\nColumns: 5\n$ mean_favs   <dbl> 29.71732\n$ median_favs <dbl> 3\n$ n           <int> 28626\n$ min_date    <dttm> 2021-10-10 00:10:02\n$ max_date    <dttm> 2021-10-12 20:12:27\n\n\n\nThe $ operator: The dollar sign allows you to select items from an object, such as columns from a table. The left-hand side is the object, and the right-hand side is the item. When you call a column like this, R will print all the observations in that column:\n\n\ntweet_summary$mean_favs\n\n[1] 29.71732\n\ntweets$source[1] # select one observation\n\n[1] \"Twitter for Android\"\n\ntweets$display_text_width[c(20,30,40)] # select multiple with c()\n\n[1]  78 287 107\n\n\n\nPipes allow you to send the output from one function straight into another function. Specifically, they send the result of the function before %>% to be the first argument of the function after %>%. It can be useful to translate the pipe as “and then”:\n\n\ntweet_summary <- tweets %>% # start with the object tweets and then\n  summarise(mean_favs = mean(favorite_count), #summarise it\n            median_favs = median(favorite_count))\n\nInline coding To insert those values into the text of a report you can use inline coding. First. we’ll create another set of objects that contain the first and last date of the tweets in our dataset. format() formats the dates to day/month/year.\n\ndate_from <- tweet_summary$min_date %>% \n  format(\"%d %B, %Y\")\n\nWarning: Unknown or uninitialised column: `min_date`.\n\ndate_to <- tweet_summary$max_date %>% \n  format(\"%d %B, %Y\")\n\nWarning: Unknown or uninitialised column: `max_date`.\n\n\nThere were tweets between NULL and NULL.\n\nExtra challenge\n\nUsing the open NYC data source i picked the following data set : Art_in_DOE_Buildings\n\nlibrary(readr)\nArt_in_DOE_buildings <- read_csv(\"Art_in_DOE_buildings.csv\")\n\nRows: 2273 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): Artwork Title, Artist_Lastname, Artist_FirstName, Medium, Artwork Y...\nnum (1): Accession\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nView(Art_in_DOE_buildings)\n\n\nNYC_School_Art <- summarise(Art_in_DOE_buildings,\n                      Artist_FirstName,\n                      Artist_Lastname,\n                      `Artwork Title`,\n                      `School Name`,\n                      Borough)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nNYC_School_Art\n\n# A tibble: 2,273 × 5\n   Artist_FirstName Artist_Lastname `Artwork Title`              Schoo…¹ Borough\n   <chr>            <chr>           <chr>                        <chr>   <chr>  \n 1 COSTANTINO       NIVOLA          \"ROOF PROMENADE SCULPTURE\"   \"LOUIS… MANHAT…\n 2 COSTANTINO       NIVOLA          \"RELIEF PANELS\"              \"LOUIS… MANHAT…\n 3 COSTANTINO       NIVOLA          \"\\\"SCULPTURED PANELS\\\"\"      \"I.S. … MANHAT…\n 4 OTELLO           GUARDUCCI       \"THE LIFE OF SAMUEL DICKSTE… \"J.H.S… MANHAT…\n 5 JOHN             MATT            \"CITY OF MANHATTAN\"          \"I.S. … MANHAT…\n 6 JACK             HASTINGS        \"BRONZE SCULPTURES\"          \"ARTHU… MANHAT…\n 7 WILLIAM          TARR            \"MARTIN LUTHER KING, JR. ME… \"\\\"MAR… 399    \n 8 JOHN             TERKEN          \"\\\"POTTERY\\\"\"                \"P.S. … BRONX  \n 9 GWEN             LUX             \"SUN, BIRDS, AND LIGHT/ EAG… \"P.S. … MANHAT…\n10 GWEN             LUX             \"SUN, BIRDS, AND LIGHT/ EAG… \"P.S. … MANHAT…\n# … with 2,263 more rows, and abbreviated variable name ¹​`School Name`\n\n\n\nhead(NYC_School_Art)\n\n# A tibble: 6 × 5\n  Artist_FirstName Artist_Lastname `Artwork Title`               Schoo…¹ Borough\n  <chr>            <chr>           <chr>                         <chr>   <chr>  \n1 COSTANTINO       NIVOLA          \"ROOF PROMENADE SCULPTURE\"    LOUIS … MANHAT…\n2 COSTANTINO       NIVOLA          \"RELIEF PANELS\"               LOUIS … MANHAT…\n3 COSTANTINO       NIVOLA          \"\\\"SCULPTURED PANELS\\\"\"       I.S. 1… MANHAT…\n4 OTELLO           GUARDUCCI       \"THE LIFE OF SAMUEL DICKSTEI… J.H.S.… MANHAT…\n5 JOHN             MATT            \"CITY OF MANHATTAN\"           I.S. 7… MANHAT…\n6 JACK             HASTINGS        \"BRONZE SCULPTURES\"           ARTHUR… MANHAT…\n# … with abbreviated variable name ¹​`School Name`\n\nlibrary(ggplot2)\nggplot(data = NYC_School_Art, \n       mapping = aes(x=Borough, \n                   y= `Artwork Title`,\n                   color=`School Name`,)) +\n  geom_point()"
  },
  {
    "objectID": "posts/Week6_qmd/Data_Summaries.html",
    "href": "posts/Week6_qmd/Data_Summaries.html",
    "title": "Data_Summaries",
    "section": "",
    "text": "tweets<- readRDS(\"ncod_tweets.rds\")\n\nhist(tweets$favorite_count)\n\n\n\nggplot(tweets, aes(x= favorite_count))+\n  geom_histogram ()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nlibrary(dplyr)\n\nfiltered_data <- tweets %>%\n  filter()\n\n\nThe summarise() function from the dplyr package is loaded as part of the tidyverse and creates summary statistics. It creates a new table with columns that summarise the data from a larger table using summary functions.\n\n\nfavorite_summary<- summarise(tweets,\n                             mean_favs= mean(favorite_count),\n                             median_favs= median(favorite_count),\n                             min_favs= min(favorite_count),\n                             sd_favs= sd(favorite_count))\n\nfavorite_summary\n\n# A tibble: 1 × 4\n  mean_favs median_favs min_favs sd_favs\n      <dbl>       <dbl>    <int>   <dbl>\n1      29.7           3        0    330.\n\n\n\nggplot(tweets, aes(x = favorite_count)) +\n  geom_histogram(bins = 25) +\n  scale_x_continuous(trans = \"pseudo_log\", \n                     breaks = c(0, 1, 10, 100, 1000, 10000))\n\n\n\n\n\ntweet_summary <- tweets %>%\n  summarise(mean_favs = mean(favorite_count),\n            median_favs = quantile(favorite_count, .5),\n            n = n(),\n            min_date = min(created_at),\n            max_date = max(created_at))\n\nglimpse(tweet_summary)\n\nRows: 1\nColumns: 5\n$ mean_favs   <dbl> 29.71732\n$ median_favs <dbl> 3\n$ n           <int> 28626\n$ min_date    <dttm> 2021-10-10 00:10:02\n$ max_date    <dttm> 2021-10-12 20:12:27\n\n\n\nThe $ operator: The dollar sign allows you to select items from an object, such as columns from a table. The left-hand side is the object, and the right-hand side is the item. When you call a column like this, R will print all the observations in that column:\n\n\ntweet_summary$mean_favs\n\n[1] 29.71732\n\ntweets$source[1] # select one observation\n\n[1] \"Twitter for Android\"\n\ntweets$display_text_width[c(20,30,40)] # select multiple with c()\n\n[1]  78 287 107\n\n\n\nPipes allow you to send the output from one function straight into another function. Specifically, they send the result of the function before %>% to be the first argument of the function after %>%. It can be useful to translate the pipe as “and then”:\n\n\ntweet_summary <- tweets %>% # start with the object tweets and then\n  summarise(mean_favs = mean(favorite_count), #summarise it\n            median_favs = median(favorite_count))\n\nInline coding To insert those values into the text of a report you can use inline coding. First. we’ll create another set of objects that contain the first and last date of the tweets in our dataset. format() formats the dates to day/month/year.\n\ndate_from <- tweet_summary$min_date %>% \n  format(\"%d %B, %Y\")\n\nWarning: Unknown or uninitialised column: `min_date`.\n\ndate_to <- tweet_summary$max_date %>% \n  format(\"%d %B, %Y\")\n\nWarning: Unknown or uninitialised column: `max_date`.\n\n\nThere were tweets between NULL and NULL.\n\nExtra challenge\n\nUsing the open NYC data source i picked the following data set : Art_in_DOE_Buildings\n\nlibrary(readr)\nArt_in_DOE_buildings <- read_csv(\"Art_in_DOE_buildings.csv\")\n\nRows: 2273 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): Artwork Title, Artist_Lastname, Artist_FirstName, Medium, Artwork Y...\nnum (1): Accession\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nView(Art_in_DOE_buildings)\n\n\nNYC_School_Art <- summarise(Art_in_DOE_buildings,\n                      Artist_FirstName,\n                      Artist_Lastname,\n                      `Artwork Title`,\n                      `School Name`,\n                      `Artwork Year`,\n                      Borough)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\nNYC_School_Art\n\n# A tibble: 2,273 × 6\n   Artist_FirstName Artist_Lastname `Artwork Title`      Schoo…¹ Artwo…² Borough\n   <chr>            <chr>           <chr>                <chr>   <chr>   <chr>  \n 1 COSTANTINO       NIVOLA          \"ROOF PROMENADE SCU… \"LOUIS… 01/01/… MANHAT…\n 2 COSTANTINO       NIVOLA          \"RELIEF PANELS\"      \"LOUIS… 01/01/… MANHAT…\n 3 COSTANTINO       NIVOLA          \"\\\"SCULPTURED PANEL… \"I.S. … 01/01/… MANHAT…\n 4 OTELLO           GUARDUCCI       \"THE LIFE OF SAMUEL… \"J.H.S… 01/01/… MANHAT…\n 5 JOHN             MATT            \"CITY OF MANHATTAN\"  \"I.S. … 01/01/… MANHAT…\n 6 JACK             HASTINGS        \"BRONZE SCULPTURES\"  \"ARTHU… 01/01/… MANHAT…\n 7 WILLIAM          TARR            \"MARTIN LUTHER KING… \"\\\"MAR… 01/01/… 399    \n 8 JOHN             TERKEN          \"\\\"POTTERY\\\"\"        \"P.S. … 01/01/… BRONX  \n 9 GWEN             LUX             \"SUN, BIRDS, AND LI… \"P.S. … 01/01/… MANHAT…\n10 GWEN             LUX             \"SUN, BIRDS, AND LI… \"P.S. … 01/01/… MANHAT…\n# … with 2,263 more rows, and abbreviated variable names ¹​`School Name`,\n#   ²​`Artwork Year`\n\n\n\nlibrary(ggplot2)\n\nggplot(NYC_School_Art, aes(x = Borough)) +\n  geom_bar() +\n  scale_x_discrete() +\n  scale_y_log10()"
  },
  {
    "objectID": "posts/Week9_qmd /Report.html",
    "href": "posts/Week9_qmd /Report.html",
    "title": "Video game review report",
    "section": "",
    "text": "This report summarises reviews submitted for Video Game products on Amazon from 1999 to 2018 made available by Ni et al. (2019). In total there are 497577 reviews in the dataset."
  },
  {
    "objectID": "posts/Week9_qmd /Report.html#number-of-reviews-by-year",
    "href": "posts/Week9_qmd /Report.html#number-of-reviews-by-year",
    "title": "Video game review report",
    "section": "Number of Reviews by Year:",
    "text": "Number of Reviews by Year:\nThe below histogram shows the number of video game reviews submitted to Amazon by year. From 1999 reviews largely increased year-on-year which is unsurprising given the growth of Amazon and access to the internet. The dataset shows the peak number of reviews was 2015 with a decline from 2016 to 2018. It is likely that this reflects the dataset being incomplete for recent years rather than the number of reviews declining in reality. Number of reviews per year:"
  },
  {
    "objectID": "posts/Week9_qmd /Report.html#verified-users",
    "href": "posts/Week9_qmd /Report.html#verified-users",
    "title": "Video game review report",
    "section": "Verified Users:",
    "text": "Verified Users:\nThe dataset contains details of whether the review was based on a verified purchase.From Amazon Community:\n\nAn “Amazon Verified Purchase” review means that we’ve verified that the person writing the review purchased the product from Amazon, and didn’t receive the product at a big discount. Reviews that are not marked “Amazon Verified Purchase” are valuable as well, but, either we cannot confirm that the product was purchased from Amazon, or that the customer paid a price that is available to most Amazon shoppers.\n\nTable 1 shows the number of reviews based on verified and unverified purchases.\n\n\n\n\nTable 1: Number of reviews by purchase status\n\n\nverified\ncounts\n\n\n\n\nFALSE\n164932\n\n\nTRUE\n332645\n\n\n\n\n\n\nWhilst the number of verified reviews is substantially larger than the number of unverified reviews, the below histogram demonstrates that this has not been a consistent trend and that the large increase in the number of reviews is largely driven by an increase in verified reviews.\n\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "posts/Week9_qmd /Report.html#report-overview",
    "href": "posts/Week9_qmd /Report.html#report-overview",
    "title": "Video game review report",
    "section": "Report Overview:",
    "text": "Report Overview:\nThis report summarises reviews submitted for Video Game products on Amazon from 1999 to 2018 made available by Ni et al. (2019). In total there are 497577 reviews in the dataset."
  },
  {
    "objectID": "posts/Week9_qmd /Report.html#review-ratings",
    "href": "posts/Week9_qmd /Report.html#review-ratings",
    "title": "Video game review report",
    "section": "Review ratings:",
    "text": "Review ratings:"
  },
  {
    "objectID": "posts/Week9_qmd /Report.html#overall",
    "href": "posts/Week9_qmd /Report.html#overall",
    "title": "Video game review report",
    "section": "Overall",
    "text": "Overall\nAmazon review ratings are provided on a scale of 1 (worst) to 5 (best) stars. The histogram below shows the total number of reviews assigned each rating."
  },
  {
    "objectID": "posts/Week9_qmd /Report.html#by-purchase-status",
    "href": "posts/Week9_qmd /Report.html#by-purchase-status",
    "title": "Video game review report",
    "section": "By purchase status",
    "text": "By purchase status\nHowever, if you break this data down by verified purchases status you can see that whilst the number of verified and unverified reviews with 1 to 4 star reviews are similar, there is a very large number of 5 star reviews for verified purchases compared to unverified purchases.\n\n\n`summarise()` has grouped output by 'rating'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "posts/Midterm/Midterm.html#easier-problems-1-100",
    "href": "posts/Midterm/Midterm.html#easier-problems-1-100",
    "title": "LOGICS, LOOPS & FUNCTIONS",
    "section": "Easier problems (1-100):",
    "text": "Easier problems (1-100):\n\n# sum numbers from 1 to 100\nsum(1:100)\n\n[1] 5050\n\n#1+2+3+4\na <- 0\nfor(i in 1:100){\n  a <- a+i\n}\na\n\n[1] 5050\n\n\n\nsum(50:100)\n\n[1] 3825\n\nsum(500:1000)\n\n[1] 375750\n\nsum_sequence <- function(min,max){\n  return(sum(min:max))\n  \n}\n\n\nsum_sequence(min = 5, max = 100)\n\n[1] 5040\n\nsum_sequence_loop <- function(min,max){\n  \n  a <- 0\n  \n  for(i in min:max){\n    a <- a+i\n  }\n  \n  return(a)\n  \n}\n\nsum_sequence_loop(1,10)\n\n[1] 55\n\n\n\n random_numbers <-runif(n = 1000,min=0,max=1000)\n \n hist(random_numbers)\n\n\n\n  normal_numbers <-rnorm(n = 1000,0,10)\n \n hist(normal_numbers)\n\n\n\n sample(1:6, 1)\n\n[1] 6"
  },
  {
    "objectID": "posts/Midterm/Midterm.html#write-your-own-descriptive-stats-functions",
    "href": "posts/Midterm/Midterm.html#write-your-own-descriptive-stats-functions",
    "title": "Midterm Project",
    "section": "Write your own descriptive stats functions",
    "text": "Write your own descriptive stats functions\n\n#using as few intrinsic functions as possible\n\n## mean\nsome_numbers <- 1:10\nmean(some_numbers)\n\n[1] 5.5\n\nmean_A <- function(x) {\n  return(sum(x) / length(x))\n}\nmean_A(some_numbers)\n\n[1] 5.5\n\n##\nsome_numbers <- 1:10\ntemp_sum <- 0\ntemp_length <- 0\nfor(i in some_numbers){\n  temp_sum <- temp_sum+i\n  temp_length <- temp_length+1\n}\ntemp_sum\n\n[1] 55\n\ntemp_length\n\n[1] 10\n\ntemp_sum/temp_length\n\n[1] 5.5\n\nmean_B <- function(x){\n  \n  temp_sum <- 0\n  temp_length <- 0\n  for (i in x) {\n    temp_sum <- temp_sum + i\n    temp_length <- temp_length + 1\n  }\n  \n  return(temp_sum/temp_length)\n}\nmean_B(1:100)\n\n[1] 50.5"
  },
  {
    "objectID": "posts/Midterm/Midterm.html#function-syntax",
    "href": "posts/Midterm/Midterm.html#function-syntax",
    "title": "Midterm Project",
    "section": "Function syntax:",
    "text": "Function syntax:\n\nfunction_name <- function(input1, input2) {\n  #code here\n  return(something)\n}\n\n\n# Declare a custom function to calculate the area of a circle\ncircle_area <- function(radius) {\n  pi * radius^2\n}\n\n# Call the function with a radius of 3\ncircle_area(3)\n\n[1] 28.27433"
  },
  {
    "objectID": "posts/Midterm/Midterm.html#hard-problems",
    "href": "posts/Midterm/Midterm.html#hard-problems",
    "title": "Midterm Project",
    "section": "Hard problems:",
    "text": "Hard problems:"
  },
  {
    "objectID": "posts/Midterm/Midterm.html#snake-and-ladder-attempt",
    "href": "posts/Midterm/Midterm.html#snake-and-ladder-attempt",
    "title": "Midterm Project",
    "section": "snake and ladder attempt:",
    "text": "snake and ladder attempt:\n\nsnakes_and_ladders <- list(`14` = 4, `19` = 8, `24` = 16, `34` = 30, `40` = 28, `48` = 36, `54` = 46, `62` = 45, `64` = 60, `74` = 68, `89` = 53, `92` = 88, `95` = 75, `99` = 80)\n\n# Define a function to simulate one game of Snakes and Ladders\nplay_game <- function() {\n  total_sum <- 0\n  number_of_rolls <- 0\n  position <- 0  # start at the beginning of the board\n  \n  while(position < 25) {\n    number_of_rolls <- number_of_rolls + 1\n    roll <- sample(c(1, 2, 3, 4, 5, 6), 1)\n    total_sum <- total_sum + roll\n    \n    if(total_sum > 100) {\n      total_sum <- total_sum - roll\n    } else {\n      # Check if the roll lands on a ladder or a snake\n      new_position <- ifelse(names(snakes_and_ladders) == as.character(total_sum), unlist(snakes_and_ladders[as.character(total_sum)]), total_sum)\n      position <- ifelse(length(new_position) > 1, new_position[1], new_position)\n    }\n  }\n  \n  number_of_rolls\n}\n\n# Record the results from multiple simulations\nset.seed(123)\nsave_rolls <- replicate(100, play_game())\n\n# Estimate the average number of rolls needed to successfully complete the game\nmean(save_rolls)\n\n[1] 7.71\n\n\n\nsave_rolls<- c()\nfor(sims in 1:100){\n  curpos<-0 \n  number_of_rolls<-0\n\nwhile(curpos < 25){\n  curpos <- curpos+sample(c(1,2,3,4,5, 6) ,1)\n\n if ( curpos == 1){\ncurpos<-6\n}\nif (curpos == 6) {\n  curpos<-9\n}\n\nif ( curpos == 9) {\n curpos<- 12\n}\nif ( curpos == 12) \n curpos<-17\nif ( curpos ==17) {\n curpos<-20\n}\nif ( curpos == 20) {\n curpos<-24\n}\nif (curpos==24){\n curpos<-84\n}\nnumber_of_rolls <- number_of_rolls+1\n}\nsave_rolls[sims]<- number_of_rolls\n}\nmean(save_rolls)\n\n[1] 2.88"
  },
  {
    "objectID": "posts/Midterm/Midterm.html#easier-problems-1-15",
    "href": "posts/Midterm/Midterm.html#easier-problems-1-15",
    "title": "Midterm Project",
    "section": "Easier problems (1-15):",
    "text": "Easier problems (1-15):\n\n# sum numbers from 1 to 100\nsum(1:100)\n\n[1] 5050\n\n#1+2+3+4\na <- 0\nfor(i in 1:100){\n  a <- a+i\n}\na\n\n[1] 5050\n\n\n\nsum(50:100)\n\n[1] 3825\n\nsum(500:1000)\n\n[1] 375750\n\nsum_sequence <- function(min,max){\n  return(sum(min:max))\n  \n}\n\n\nsum_sequence(min = 5, max = 100)\n\n[1] 5040\n\nsum_sequence_loop <- function(min,max){\n  \n  a <- 0\n  \n  for(i in min:max){\n    a <- a+i\n  }\n  \n  return(a)\n  \n}\n\nsum_sequence_loop(1,10)\n\n[1] 55\n\n\n\n random_numbers <-runif(n = 1000,min=0,max=1000)\n \n hist(random_numbers)\n\n\n\n  normal_numbers <-rnorm(n = 1000,0,10)\n \n hist(normal_numbers)\n\n\n\n sample(1:6, 1)\n\n[1] 3"
  },
  {
    "objectID": "posts/Midterm/Midterm.html#equal-to",
    "href": "posts/Midterm/Midterm.html#equal-to",
    "title": "Midterm Project",
    "section": "equal to ==",
    "text": "equal to ==\n\n1 == 1 # is 1 equal to 1?\n\n[1] TRUE\n\n#> [1] TRUE\n1 == 2 # is 1 equal to 2?\n\n[1] FALSE\n\n#> [1] FALSE\n\nc(1, 2, 3) == c(2, 1, 3) # compares each element with each element\n\n[1] FALSE FALSE  TRUE\n\n#> [1] FALSE FALSE  TRUE\n1 == c(2, 1, 3)\n\n[1] FALSE  TRUE FALSE\n\n#> [1] FALSE  TRUE FALSE\n\n\nnot equal to !=\n\n1 != 1 # is 1 equal to 1?\n\n[1] FALSE\n\n#> [1] FALSE\n1 != 2 # is 1 equal to 2?\n\n[1] TRUE\n\n#> [1] TRUE\n\nc(1, 2, 3) != c(2, 1, 3) # compares each element with each element\n\n[1]  TRUE  TRUE FALSE\n\n#> [1]  TRUE  TRUE FALSE\n1 != c(2, 1, 3)\n\n[1]  TRUE FALSE  TRUE\n\n#> [1]  TRUE FALSE  TRUE\n\n\n\nGreater than/ less than\n\n1 > 1 # is 1 greater than 1?\n\n[1] FALSE\n\n#> [1] FALSE\n5 > 1 # is 5 greater than 1?\n\n[1] TRUE\n\n#> [1] TRUE\n3 < 2 # is 3 less than 2?\n\n[1] FALSE\n\n#> [1] FALSE\n3 < 1 # is 3 less than 1?\n\n[1] FALSE\n\n#> [1] FALSE\n\nc(1, 2, 3) > c(2, 1, 3) # ask the question element by element\n\n[1] FALSE  TRUE FALSE\n\n#> [1] FALSE  TRUE FALSE\nc(1, 2, 3) < c(2, 1, 3)\n\n[1]  TRUE FALSE FALSE\n\n#> [1]  TRUE FALSE FALSE\n\n2 > c(1, 2, 3) # is greater than each of the numbers\n\n[1]  TRUE FALSE FALSE\n\n#> [1]  TRUE FALSE FALSE\n\n\n\n>= <= Is something greater than or equal to something else:\n\n1 >= 1 # is 1 greater than 1?\n\n[1] TRUE\n\n#> [1] TRUE\n5 >= 1 # is 5 greater than 1?\n\n[1] TRUE\n\n#> [1] TRUE\n3 <= 2 # is 3 less than 2?\n\n[1] FALSE\n\n#> [1] FALSE\n3 <= 1 # is 3 less than 1?\n\n[1] FALSE\n\n#> [1] FALSE\n\nc(1, 2, 3) >= c(2, 1, 3) # ask the question element by element\n\n[1] FALSE  TRUE  TRUE\n\n#> [1] FALSE  TRUE  TRUE\nc(1, 2, 3) <= c(2, 1, 3)\n\n[1]  TRUE FALSE  TRUE\n\n#> [1]  TRUE FALSE  TRUE\n\n2 >= c(1, 2, 3) # is greater than each of the numbers\n\n[1]  TRUE  TRUE FALSE\n\n#> [1]  TRUE  TRUE FALSE\n\n\n\nAND\n\n\nThe ampersand & is used for AND, which allows use to evaluate whether two or more properties are all TRUE.\n\n# is 16 divisible by 4 AND 8\n16 %% 4 == 0 & 16 %% 8 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n# is 16 divisible by 4 AND 3\n16 %% 4 == 0 & 16 %% 3 == 0\n\n[1] FALSE\n\n#> [1] FALSE\n\n# is 16 divisible by 8 and 4 and 2\n16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n\n\nOR\nThe | is used for OR, which allows use to evaluate at least one of the properties is TRUE.\n\n# is 16 divisible by 4 OR 8\n16 %% 4 == 0 | 16 %% 8 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n# is 16 divisible by 4 OR 3\n# it is divisible by 4, so the answer is TRUE\n# because at least one of the comparisons is TRUE\n16 %% 4 == 0 | 16 %% 3 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n\n\nTRUE FALSE\nWhen R returns values as TRUE or FALSE, it return a logical variable. It also treats TRUE as a 1, and FALSE as a 0. In the example below we see it is possible sum up a logical variable with multiple TRUE and FALSE entries.\n\nc(1, 2, 3) == c(1, 2, 3)\n\n[1] TRUE TRUE TRUE\n\n#> [1] TRUE TRUE TRUE\nsum(c(1, 2, 3) == c(1, 2, 3))\n\n[1] 3\n\n#> [1] 3\n\nc(1, 2, 3) == c(2, 1, 3)\n\n[1] FALSE FALSE  TRUE\n\n#> [1] FALSE FALSE  TRUE\nsum(c(1, 2, 3) == c(2, 1, 3))\n\n[1] 1\n\n#> [1] 1"
  }
]