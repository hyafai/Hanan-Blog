---
title: " Data Wrangling"
author: "Hanan Yafai"
date: "2023-05-03"
categories: [notes]
image: "logo.png"
theme: "pulse"
html_document:
 toc: TRUE
---

```{r setup, include=FALSE}
library(dplyr)
library(tidyverse)
```

```{r, echo=FALSE}
budget <- read_csv("data/budget.csv", show_col_types = FALSE)
```

## Select:

```{r, echo=FALSE}
# select single column by name
product_dat <- budget %>% 
  select(product) 

# select single column by number
product_dat <- budget %>% select(2) 

# select single column by number
product_dat <- budget %>% select(2,3) 
```

```{r, echo=FALSE}
#print columns 2 and 3
budget %>% select(2,3)
```

```{r}
product_dat <- budget %>% select(2) 
product_dat
```

```{r, echo=FALSE}
product_dat <- budget %>% select(2,3) 
knitr::kable(product_dat)
```

```{r, echo=FALSE}
( product_dat <- budget %>% select(2,3) )

```

### Colon Notation

```{r, echo=FALSE}

# select columns individually
sales2019 <- budget %>% select(region, product, sales_2019)

# select columns with colon
sales2019 <- budget %>% select(region:sales_2019)
sales2019

# select columns with colon
years <- budget %>% select(3:7)
years <- budget %>% select(sales_2019:satisfaction_2020)

```

### UNSELECT

```{r, echo=FALSE}
# de-select individual columns
sales <- budget %>% select(-expenses_2019, -expenses_2020)


# de-select a range of columns
sales <- budget %>% select(-(expenses_2019:expenses_2020))
```

## FILTER

```{r, echo=FALSE}
# select all rows where region equals North
budget %>% filter(region == "North")

# select all rows where expenses_2020 were exactly equal to 200
budget %>% filter(expenses_2020 == 200)

# select all rows where sales_2019 was more than 100
budget %>% filter(sales_2019 > 100)

# everything but the North
budget %>% filter(region != "North")
```

```{r, echo=FALSE}
# regions and products with profit in both 2019 and 2020
profit_both <- budget %>% 
  filter(
    sales_2019 > expenses_2019,
    sales_2020 > expenses_2020
  )

# the same as above, using & instead of a comma
profit_both <- budget %>% 
  filter(
    sales_2019 > expenses_2019 &
    sales_2020 > expenses_2020
  )

# regions and products with profit in 2019 or 2020
profit_either <- budget %>% 
  filter(
    sales_2019 > expenses_2019 |
    sales_2020 > expenses_2020
  )

# 2020 profit greater than 1000
profit_1000 <- budget %>%
  filter(sales_2020 - expenses_2020 > 1000)
```

### In

```{r}

# retain any rows where region is north or south, and where product equals widget
budget %>%
  filter(region %in% c("North", "South"),
         product == "widgets")

# retain any rows where the region is not east or west, and where the product does not equal gadgets
budget %>%
  filter(!region %in% c("East", "West"),
         product != "gadgets")
```

```{r, echo=FALSE}

a <- c(1,2,3,4,5)

6 %in% a

1 %in% a

if(1 %in% a == TRUE) {
  "yes"
}

if(6 %in% a == FALSE) {
  "yes"
}

letters
LETTERS

which(letters %in% "g", arr.ind = TRUE)
```

## Arrange

```{r, echo=FALSE}
# arranging the table 
# first by product in alphabetical order
# then by "region" in reverse alphabetical order
budget %>%
  arrange(product, desc(region))

budget %>%
  arrange(product, region)
```

## Mutate

```{r, include=FALSE}
budget2 <- budget %>%
  mutate(
    sales = sales_2019 + sales_2020,
    expenses = expenses_2019 + expenses_2020,
    profit = sales - expenses,
    region = paste(region, "Office")
  )

budget3 <- budget %>%
  mutate(
    A = 1,
    B = 1:8,
    C = mean(1:8),
    D = c(1,2,1,2,1,2,1,2),
    E = rep(1:2,4)
  )
```

**Mutate with logic operators**

```{r}

budget2 <- budget2 %>%
  mutate(profit_category = profit > 0,
         product = as.factor(product))

```

**Using case_when**

```{r, echo=FALSE}
budget3 <- budget2 %>%
  mutate(profit_category = case_when(profit > 0 ~ "PROFIT",
                                     profit < 0 ~ "NO PROFIT"))
```

```{r, echo=FALSE}
# create a column where people get a bonus if customer satisfaction was overall high or very high

bonus <- budget3 %>%
  mutate(bonus_2019 = case_when(
    satisfaction_2019 %in% c("very low", "low", "neutral") ~ "no bonus",
    satisfaction_2019 %in% c("high", "very high") ~ "bonus")
    )

```

```{r, echo=FALSE}
# new management takes over - people only get a bonus if customer satisfaction was overall high or very high AND if a profit was returned

bonus2 <- budget3 %>%
  mutate(bonus_2020 = case_when(satisfaction_2020 == "high" & 
                                  profit_category == "PROFIT" ~ "bonus",
                                satisfaction_2020 == "very high" & 
                                  profit_category == "PROFIT" ~ "bonus",
                                TRUE ~ "No bonus")) # set all other values to "no bonus"
```

## Summaries

```{r, echo=FALSE}
budget4 <- budget %>%
  select(-satisfaction_2019, -satisfaction_2020) %>%
  pivot_longer(cols = sales_2019:expenses_2020,
               names_to = c("type", "year"),
               names_sep = "_",
               values_to = "value") %>%
  pivot_wider(names_from = type,
              values_from = value)

head(budget4) # check the format
```

```{r}
budget4 %>%
  summarise(
    mean_sales = mean(sales),
    mean_expenses = mean(expenses),
    min_profit = min(expenses - sales),
    max_profit = max(expenses - sales)
  )
```

## Group_by

```{r, echo=FALSE}
year_prod <- budget4 %>%
  group_by(year, product) %>%
  summarise(
    mean_sales = mean(sales),
    mean_expenses = mean(expenses),
    min_profit = min(expenses - sales),
    max_profit = max(expenses - sales)
  ) %>%
  ungroup()

region_prod <- budget4 %>%
  group_by(region, product) %>%
  summarise(
    mean_sales = mean(sales),
    mean_expenses = mean(expenses),
    min_profit = min(expenses - sales),
    max_profit = max(expenses - sales)
  ) %>%
  ungroup()
```

## Tidy Tuesday example

```{r}
# Run once
# install this package
 remotes::install_github("nrennie/LondonMarathon")
```

```{r}
data(winners, package = "LondonMarathon")
data(london_marathon, package = "LondonMarathon")
```

```{r, echo=FALSE}
library(tidyverse)

# read in data
#london_marathon <- read_csv("london_marathon.csv")
# winners <- read_csv("winners.csv")

# london marathon plot
london_plot <- london_marathon %>%
  filter(Year < 2020) %>%
  mutate(Year = factor(Year))

ggplot(
  data = london_plot,
  mapping = aes(y = Year)
) +
  geom_point(aes(x = Starters),
    colour = "#008080"
  ) +
  geom_point(aes(x = Finishers),
    colour = "#800080"
  ) +
  geom_segment(aes(
    x = Starters,
    xend = Finishers,
    y = Year,
    yend = Year
  )) +
  labs(
    x = "Number of runners",
    title = "Number of London Marathon Starters and Finishers"
  ) +
  theme_minimal() +
  theme(
    axis.title.y = element_blank(),
    plot.background = element_rect(fill = "white", colour = "white"),
    panel.background = element_rect(fill = "white", colour = "white")
  )

#ggsave(filename = "london_marathon.png", height = 7, width = 5)

# winners plot
winners_plot <- winners %>%
  group_by(Nationality) %>%
  summarise(n = n())

ggplot(
  data = winners_plot,
  mapping = aes(
    y = reorder(Nationality, n),
    x = n
  )
) +
  geom_col(fill = "#e00601") +
  geom_text(aes(label = n),
    colour = "#e00601",
    hjust = -1
  ) +
  labs(
    x = "Number of winners",
    title = "Nationality of London Marathon Winners"
  ) +
  scale_x_continuous(limits = c(0, 50)) +
  coord_cartesian(expand = FALSE) +
  theme_minimal() +
  theme(
    axis.title.y = element_blank(),
    plot.background = element_rect(fill = "white", colour = "white"),
    panel.background = element_rect(fill = "white", colour = "white")
  )

```
