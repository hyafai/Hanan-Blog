---
title: " LOGICS, LOOPS & FUNCTIONS"
author: "Hanan Yafai"
date: "2023-02-15"
categories: [notes]
image: "logo.png"
theme: "pulse"
html_document:
 toc: TRUE
---

### **equal to ==**

```{r}
1 == 1 # is 1 equal to 1?
#> [1] TRUE
1 == 2 # is 1 equal to 2?
#> [1] FALSE

c(1, 2, 3) == c(2, 1, 3) # compares each element with each element
#> [1] FALSE FALSE  TRUE
1 == c(2, 1, 3)
#> [1] FALSE  TRUE FALSE

```

### **not equal to !=**

```{r}
1 != 1 # is 1 equal to 1?
#> [1] FALSE
1 != 2 # is 1 equal to 2?
#> [1] TRUE

c(1, 2, 3) != c(2, 1, 3) # compares each element with each element
#> [1]  TRUE  TRUE FALSE
1 != c(2, 1, 3)
#> [1]  TRUE FALSE  TRUE
```

### **Greater than/ less than**

```{r}

1 > 1 # is 1 greater than 1?
#> [1] FALSE
5 > 1 # is 5 greater than 1?
#> [1] TRUE
3 < 2 # is 3 less than 2?
#> [1] FALSE
3 < 1 # is 3 less than 1?
#> [1] FALSE

c(1, 2, 3) > c(2, 1, 3) # ask the question element by element
#> [1] FALSE  TRUE FALSE
c(1, 2, 3) < c(2, 1, 3)
#> [1]  TRUE FALSE FALSE

2 > c(1, 2, 3) # is greater than each of the numbers
#> [1]  TRUE FALSE FALSE
```

### **\>= \<=** Is something greater than or equal to something else:

```{r}
1 >= 1 # is 1 greater than 1?
#> [1] TRUE
5 >= 1 # is 5 greater than 1?
#> [1] TRUE
3 <= 2 # is 3 less than 2?
#> [1] FALSE
3 <= 1 # is 3 less than 1?
#> [1] FALSE

c(1, 2, 3) >= c(2, 1, 3) # ask the question element by element
#> [1] FALSE  TRUE  TRUE
c(1, 2, 3) <= c(2, 1, 3)
#> [1]  TRUE FALSE  TRUE

2 >= c(1, 2, 3) # is greater than each of the numbers
#> [1]  TRUE  TRUE FALSE
```

### **AND**

### The ampersand `&` is used for AND, which allows use to evaluate whether two or more properties are all TRUE.

```{r}
# is 16 divisible by 4 AND 8
16 %% 4 == 0 & 16 %% 8 == 0
#> [1] TRUE

# is 16 divisible by 4 AND 3
16 %% 4 == 0 & 16 %% 3 == 0
#> [1] FALSE

# is 16 divisible by 8 and 4 and 2
16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0
#> [1] TRUE
```

### **OR**

The `|` is used for OR, which allows use to evaluate at least one of the properties is TRUE.

```{r}
# is 16 divisible by 4 OR 8
16 %% 4 == 0 | 16 %% 8 == 0
#> [1] TRUE

# is 16 divisible by 4 OR 3
# it is divisible by 4, so the answer is TRUE
# because at least one of the comparisons is TRUE
16 %% 4 == 0 | 16 %% 3 == 0
#> [1] TRUE
```

### **TRUE FALSE**

When R returns values as TRUE or FALSE, it return a logical variable. It also treats TRUE as a 1, and FALSE as a 0. In the example below we see it is possible sum up a logical variable with multiple TRUE and FALSE entries.

```{r}
c(1, 2, 3) == c(1, 2, 3)
#> [1] TRUE TRUE TRUE
sum(c(1, 2, 3) == c(1, 2, 3))
#> [1] 3

c(1, 2, 3) == c(2, 1, 3)
#> [1] FALSE FALSE  TRUE
sum(c(1, 2, 3) == c(2, 1, 3))
#> [1] 1
```

## **IF ELSE**

In other words, IF the situation is X, then do something; ELSE (if the situation is not X), then do something different. Generally, IF and ELSE statements are used inside loops (for, or while, or repeat loops), because at each step or iteration of the loop, we want to check something, and then do something.

```{r}
a <- 1 # define a to be a 1
if (a == 1) {
  print(a) # this is what happens if a==1
} else {
  print("A is not 1") # this is what happens if a is not 1
}
#> [1] 1


a <- 2 # define a to be a 1
if (a == 1) {
  print(a) # this is what happens if a==1
} else {
  print("A is not 1") # this is what happens if a is not 1
}
#> [1] "A is not 1"
```

Normally we find IF and ELSE in a loop like this:

```{r}
a <- c(1, 0, 1, 0, 0, 0, 1) # make a variable contain 1s and 0s

# write a loop to check each element in the variable
# and do different things depending on the element

for (i in a) {
  if (i == 1) {
    print("I'm a 1") # what to do when i is 1
  } else {
    print("I'm not a 1") # what to do when i is not 1
  }
}
#> [1] "I'm a 1"
#> [1] "I'm not a 1"
#> [1] "I'm a 1"
#> [1] "I'm not a 1"
#> [1] "I'm not a 1"
#> [1] "I'm not a 1"
#> [1] "I'm a 1"
```

```{r}
# sum numbers from 1 to 100
sum(1:100)
#1+2+3+4
a <- 0
for(i in 1:100){
  a <- a+i
}
a

```

```{r}

sum(50:100)
sum(500:1000)
sum_sequence <- function(min,max){
  return(sum(min:max))
  
}
sum_sequence(min = 5, max = 100)
sum_sequence_loop <- function(min,max){
  
  a <- 0
  
  for(i in min:max){
    a <- a+i
  }
  
  return(a)
  
}

sum_sequence_loop(1,10)
```

```{r}
 random_numbers <-runif(n = 1000,min=0,max=1000)
 
 hist(random_numbers)
 
 
  normal_numbers <-rnorm(n = 1000,0,10)
 
 hist(normal_numbers)
 
 sample(1:6, 1)
 
```

\## Write your own descriptive stats functions

```{r}
#using as few intrinsic functions as possible

## mean
some_numbers <- 1:10
mean(some_numbers)
mean_A <- function(x) {
  return(sum(x) / length(x))
}
mean_A(some_numbers)
##
some_numbers <- 1:10
temp_sum <- 0
temp_length <- 0
for(i in some_numbers){
  temp_sum <- temp_sum+i
  temp_length <- temp_length+1
}
temp_sum
temp_length
temp_sum/temp_length
mean_B <- function(x){
  
  temp_sum <- 0
  temp_length <- 0
  for (i in x) {
    temp_sum <- temp_sum + i
    temp_length <- temp_length + 1
  }
  
  return(temp_sum/temp_length)
}
mean_B(1:100)

```

### **function syntax**

```{r}
function_name <- function(input1, input2) {
  #code here
  return(something)
}
```

```{r}
# Declare a custom function to calculate the area of a circle
circle_area <- function(radius) {
  pi * radius^2
}

# Call the function with a radius of 3
circle_area(3)

```

```{r}
## Solve fizz buzz problem
for(i in 1:100) {
  if(i %% 3 == 0 & i %% 5 == 0) {
    print("FizzBuzz")
  } else if(i %% 3 == 0) {
    print("Fizz")
  } else if(i %% 5 == 0) {
    print("Buzz")
  } else {
    print(i)
  }
}
```

```{r}
# rolling a dice with sample
sample(c(1,2,3,4,5,6),1)
#> [1] 5
sample(c(1,2,3,4,5,6),1)
#> [1] 4
sample(c(1,2,3,4,5,6),1)
#> [1] 4
```

```{r}
# Define the snakes and ladders as a list of start and end positions
snakes_and_ladders <- list(`14` = 4, `19` = 8, `24` = 16, `34` = 30, `40` = 28, `48` = 36, `54` = 46, `62` = 45, `64` = 60, `74` = 68, `89` = 53, `92` = 88, `95` = 75, `99` = 80)



# Define a function to simulate playing the game
play_snakes_and_ladders <- function() {
  # Initialize the player's position and the number of rolls
  position <- 0
  num_rolls <- 0
  
  # Continue rolling the dice and moving the player until they reach the end of the board (position 100)
  while (position < 100) {
    # Roll the dice
    roll <- sample(1:6, 1)
    num_rolls <- num_rolls + 1
    
    # Move the player forward by the number of squares rolled
    position <- position + roll
    
    # Check if the player lands on a snake or ladder
    if (as.character(position) %in% names(snakes_and_ladders)) {
      # If the player lands on a snake or ladder, move them to the corresponding end position
      position <- snakes_and_ladders[[as.character(position)]]
    }
    
    # If the player overshoots the end of the board, move them back by the excess number of squares
    if (position > 100) {
      position <- 100 - (position - 100)
    }
  }
  
  # Return the number of rolls it took to complete the game
  return(num_rolls)
}

# Simulate 1000 games and record the number of rolls it takes to complete each game
num_rolls <- replicate(1000, play_snakes_and_ladders())

# Calculate the average number of rolls needed to complete the game
mean(num_rolls)

```

paste() function

i could be the name of the variable\
i is the iterator

rm(i)

```{r}
# Define the snakes and ladders
snakes_and_ladders <- listsnakes_and_ladders <- list(`14` = 4, `19` = 8, `24` = 16, `34` = 30, `40` = 28, `48` = 36, `54` = 46, `62` = 45, `64` = 60, `74` = 68, `89` = 53, `92` = 88, `95` = 75, `99` = 80)
# Define a function to simulate one game of Snakes and Ladders
play_game <- function() {
  total_sum <- 0
  number_of_rolls <- 0
  position <- 0  # start at the beginning of the board
  
  while(position < 100) {
    number_of_rolls <- number_of_rolls + 1
    roll <- sample(c(1, 2, 3, 4, 5, 6), 1)
    total_sum <- total_sum + roll
    
    if(total_sum > 100) {
      total_sum <- total_sum - roll
    } else {
      # Check if the roll lands on a ladder or a snake
      new_position <- ifelse(names(snakes_and_ladders) == as.character(total_sum), unlist(snakes_and_ladders[as.character(total_sum)]), total_sum)
      position <- new_position
    }
  }
  
  number_of_rolls
}

# Record the results from multiple simulations
set.seed(123)
save_rolls <- replicate(1000, play_game())

# Estimate the average number of rolls needed to successfully complete the game
mean(save_rolls)

```

```{r}
# Define the snakes and ladders
snakes_and_ladders <- list(`14` = 4, `19` = 8, `24` = 16, `34` = 30, `40` = 28, `48` = 36, `54` = 46, `62` = 45, `64` = 60, `74` = 68, `89` = 53, `92` = 88, `95` = 75, `99` = 80)

play_game <- function() {
  total_sum <- 0
  number_of_rolls <- 0
  position <- 0  # start at the beginning of the board
  
  while(position < 100) {
    number_of_rolls <- number_of_rolls + 1
    roll <- sample(c(1, 2, 3, 4, 5, 6), 1)
    total_sum <- total_sum + roll
    
    if(total_sum > 100) {
      total_sum <- total_sum - roll
    } else {
      # Check if the roll lands on a ladder or a snake
      new_position <- ifelse(names(snakes_and_ladders) == as.character(total_sum), unlist(snakes_and_ladders[as.character(total_sum)]), total_sum)
      position <- ifelse(length(new_position) > 1, new_position[1], new_position)
    }
  }
  
  number_of_rolls
}

# Record the results from multiple simulations
set.seed(123)
save_rolls <- replicate(1000, play_game())

# Estimate the average number of rolls needed to successfully complete the game
mean(save_rolls)
```
