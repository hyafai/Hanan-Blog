---
title: " LOGICS, LOOPS & FUNCTIONS"
author: "Hanan Yafai"
date: "2023-02-15"
categories: [notes]
image: "logo.png"
theme: "pulse"
html_document:
 toc: TRUE
---

### **equal to ==**

```{r}
1 == 1 # is 1 equal to 1?
#> [1] TRUE
1 == 2 # is 1 equal to 2?
#> [1] FALSE

c(1, 2, 3) == c(2, 1, 3) # compares each element with each element
#> [1] FALSE FALSE  TRUE
1 == c(2, 1, 3)
#> [1] FALSE  TRUE FALSE

```

### **not equal to !=**

```{r}
1 != 1 # is 1 equal to 1?
#> [1] FALSE
1 != 2 # is 1 equal to 2?
#> [1] TRUE

c(1, 2, 3) != c(2, 1, 3) # compares each element with each element
#> [1]  TRUE  TRUE FALSE
1 != c(2, 1, 3)
#> [1]  TRUE FALSE  TRUE
```

### **Greater than/ less than**

```{r}

1 > 1 # is 1 greater than 1?
#> [1] FALSE
5 > 1 # is 5 greater than 1?
#> [1] TRUE
3 < 2 # is 3 less than 2?
#> [1] FALSE
3 < 1 # is 3 less than 1?
#> [1] FALSE

c(1, 2, 3) > c(2, 1, 3) # ask the question element by element
#> [1] FALSE  TRUE FALSE
c(1, 2, 3) < c(2, 1, 3)
#> [1]  TRUE FALSE FALSE

2 > c(1, 2, 3) # is greater than each of the numbers
#> [1]  TRUE FALSE FALSE
```

### **\>= \<=** Is something greater than or equal to something else:

```{r}
1 >= 1 # is 1 greater than 1?
#> [1] TRUE
5 >= 1 # is 5 greater than 1?
#> [1] TRUE
3 <= 2 # is 3 less than 2?
#> [1] FALSE
3 <= 1 # is 3 less than 1?
#> [1] FALSE

c(1, 2, 3) >= c(2, 1, 3) # ask the question element by element
#> [1] FALSE  TRUE  TRUE
c(1, 2, 3) <= c(2, 1, 3)
#> [1]  TRUE FALSE  TRUE

2 >= c(1, 2, 3) # is greater than each of the numbers
#> [1]  TRUE  TRUE FALSE
```

### **AND**

### The ampersand `&` is used for AND, which allows use to evaluate whether two or more properties are all TRUE.

```{r}
# is 16 divisible by 4 AND 8
16 %% 4 == 0 & 16 %% 8 == 0
#> [1] TRUE

# is 16 divisible by 4 AND 3
16 %% 4 == 0 & 16 %% 3 == 0
#> [1] FALSE

# is 16 divisible by 8 and 4 and 2
16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0
#> [1] TRUE
```

### **OR**

The `|` is used for OR, which allows use to evaluate at least one of the properties is TRUE.

```{r}
# is 16 divisible by 4 OR 8
16 %% 4 == 0 | 16 %% 8 == 0
#> [1] TRUE

# is 16 divisible by 4 OR 3
# it is divisible by 4, so the answer is TRUE
# because at least one of the comparisons is TRUE
16 %% 4 == 0 | 16 %% 3 == 0
#> [1] TRUE
```

### **TRUE FALSE**

When R returns values as TRUE or FALSE, it return a logical variable. It also treats TRUE as a 1, and FALSE as a 0. In the example below we see it is possible sum up a logical variable with multiple TRUE and FALSE entries.

```{r}
c(1, 2, 3) == c(1, 2, 3)
#> [1] TRUE TRUE TRUE
sum(c(1, 2, 3) == c(1, 2, 3))
#> [1] 3

c(1, 2, 3) == c(2, 1, 3)
#> [1] FALSE FALSE  TRUE
sum(c(1, 2, 3) == c(2, 1, 3))
#> [1] 1
```

## **IF ELSE**

In other words, IF the situation is X, then do something; ELSE (if the situation is not X), then do something different. Generally, IF and ELSE statements are used inside loops (for, or while, or repeat loops), because at each step or iteration of the loop, we want to check something, and then do something.

```{r}
a <- 1 # define a to be a 1
if (a == 1) {
  print(a) # this is what happens if a==1
} else {
  print("A is not 1") # this is what happens if a is not 1
}
#> [1] 1


a <- 2 # define a to be a 1
if (a == 1) {
  print(a) # this is what happens if a==1
} else {
  print("A is not 1") # this is what happens if a is not 1
}
#> [1] "A is not 1"
```

Normally we find IF and ELSE in a loop like this:

```{r}
a <- c(1, 0, 1, 0, 0, 0, 1) # make a variable contain 1s and 0s

# write a loop to check each element in the variable
# and do different things depending on the element

for (i in a) {
  if (i == 1) {
    print("I'm a 1") # what to do when i is 1
  } else {
    print("I'm not a 1") # what to do when i is not 1
  }
}
#> [1] "I'm a 1"
#> [1] "I'm not a 1"
#> [1] "I'm a 1"
#> [1] "I'm not a 1"
#> [1] "I'm not a 1"
#> [1] "I'm not a 1"
#> [1] "I'm a 1"
```

### **function syntax**

```{r}
function_name <- function(input1, input2) {
  #code here
  return(something)
}
```

paste() function

i could be the name of the variable\
i is the iterator

rm(i)
