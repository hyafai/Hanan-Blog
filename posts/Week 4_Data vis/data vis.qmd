---
title: " Week4_Data type & Visualization"
author: "Hanan Yafai"
date: "2023-02-27"
categories: [notes]
image: "visuals.png"
---

```{r setup, include=FALSE}

#load ggplot2 and other example data set 
library(tidyverse)
# load the data 
starwars_copy<- starwars
#some of the data type we can see
head(starwars_copy)
class(starwars_copy$name)
class(starwars_copy$height)
ggplot(data=starwars_copy, mapping = aes(x=height,y=mass) )+
 geom_point()
```

**The different type of data:**

1.  **Continuous** the variables always have a\[numeric\] data type. They are either integers like 42 or \[doubles\] a data type representing a real decimal number like 3.14159

Example:

```{r}
typeof(10) # double 
typeof(10.0) # double 
typeof(10L) # integer
```

```{r}
# r will assume that all numbers are double unless you add L to get rid of the dismal EX. (age)
typeof(10L)
typeof(10.99877634567)
```

2.  **Categorical**:

    -   Categorical variables can be nominal, where the categories don't really have an order, or ordinal where they have a clear order but the distance between the categories isn't something you could exactly equate.

    <!-- -->

    -   Categorical data can have a character data type, also called strings. Categorical data can also be factors, a specific type of integer that lets you specify the category names and their order.

Example:

```{r}
x <- c(-3, 0, .5)  # numeric vector
f <- factor(x)     # convert to factor
x == as.numeric(f) # does not convert back to numeric 
```

3.  **Date and Time data:**

```{r}
# the current date
lubridate::today()
```

## **Tidy data:**

**Is a format for data that maps the meaning onto the structure.**

Tidy data has three rules:

-   Each \[variable\] must have its own column

-   Each  \[observation\] must have its own row

-   Each  \[value\] must have its own cell

Example of tidy data :

```{r show_col_types= FALSE}
tidy_data <- read.csv("data/tidy_data.csv")
print(tidy_data)
```

Example of untidy data :

```{r show_col_types= FALSE}
untidy_data <- read.csv("data/untidy_data.csv" )
print(untidy_data)
```

-   **Plotting the data:**

    -   A grammar of graphics (the "gg" in "ggplot") is a standardized way to describe the components of a graphic. ggplot2 uses a layered grammar of graphics, in which plots are built up in a series of layers. 

[**The layer concepts:**]{.underline}

First, the plot space is built *(layer 1)*; the variables are specified *(layer 2);* the type of visualization (known as a geom) that is desired for these variables is specified *(layer 3)*.

geom_point()is called to visualize individual data points; a second geom is added to include a line of best fit *(layer 4),* the axis labels are edited for readability *(layer 5)*, and finally, a theme is applied to change the overall appearance of the plot (*layer 6).*

ggplot example:

```{r}
survey_data <-read.csv("https://psyteachr.github.io/ads-v2/data/survey_data.csv")
head(survey_data)

library(ggplot2)
ggplot(data = survey_data, 
       mapping = aes(x=wait_time, 
                   y= satisfaction,
                   color= wait_time,
             size= satisfaction)) +
  geom_point()

```

Tips:

-   lm stands for linear model

geom_smooth(method = "lm")
ggplot(data = survey_data,
mapping = aes(x=wait_time, ))

-   \|fig-width:

-   glimpse (starwars_copy)
